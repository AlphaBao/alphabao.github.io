<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天方夜</title>
  <icon>https://www.gravatar.com/avatar/a8e0df01982f24888d58bf5169a383b8</icon>
  <subtitle>不患人之不己知，患不知人也</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alphabao.github.io/"/>
  <updated>2022-03-19T13:09:07.083Z</updated>
  <id>http://alphabao.github.io/</id>
  
  <author>
    <name>天方夜</name>
    <email>007nec@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSRF 原理、攻击、防御及其他</title>
    <link href="http://alphabao.github.io/2022/03/19/csrf-principles-attacks-defenses-and-more/"/>
    <id>http://alphabao.github.io/2022/03/19/csrf-principles-attacks-defenses-and-more/</id>
    <published>2022-03-19T09:20:08.000Z</published>
    <updated>2022-03-19T13:09:07.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSRF-概述："><a href="#CSRF-概述：" class="headerlink" title="CSRF 概述："></a>CSRF 概述：</h1><p>CSRF 就是 Cross Site Request Forgery，跨站请求伪造。这种攻击利用了浏览器端状态（Cookie）管理规则与服务端鉴权规则。CSRF 在攻击过程中不需要获取到用户的登录凭据，而是借用户之手发出恶意请求。</p><p>CSRF 的存在是由于 Cookie 架构的设计“非常古老”，已经有些不适应网络安全的需要。但是如下文所述，现代浏览器已经给 Cookie 规则打了很多“补丁”，安全性大大提升。实际上，现代浏览器条件下，很多“传统的” CSRF 攻击手段已经失效，但是由于网络安全的短板效应，永远不能放松警惕，只有深入理解攻击方式的来龙去脉，才能从整体上尽可能确保安全。</p><p>另一个 Web 开发者常听说的攻击方式叫 XSS（Cross Site Scripting），跨站脚本，了解它的人应该更多一些。相比而言，CSRF 攻击构造起来可以更简单，更低成本，但是攻击方式更精巧，背后的原理的也更复杂一些。更容易导致混乱的地方在于，不同的攻击方式可能混合出现。比如考虑到 UGC（User-generated content）场景下可能出现的 CSRF，就变得比典型的 CSRF 要复杂。对于整体防御思路来说，是很大的挑战。</p><p>狭义上的 CSRF 知识不难理解，但要深入理解就比较繁琐，因为网络安全的事情往往都是很多不同层面的知识互相关联，CSRF 尤其如此。</p><h1 id="与-CSRF-关系密切的领域："><a href="#与-CSRF-关系密切的领域：" class="headerlink" title="与 CSRF 关系密切的领域："></a>与 CSRF 关系密切的领域：</h1><ol><li>网络协议</li><li>浏览器特性</li><li>API设计</li><li>认证方式</li><li>密码学</li><li>社会工程</li></ol><p>可见，CSRF 本身不复杂，甚至看起来比较简单，但是每个相关的领域，都是个非常深的坑，本文会尽可能设计到足够广的领域。阅读本文之后，会发现每个领域的知识都有很多可以继续探索的地方。<a id="more"></a></p><h1 id="CSRF-存在的原因："><a href="#CSRF-存在的原因：" class="headerlink" title="CSRF 存在的原因："></a>CSRF 存在的原因：</h1><p>浏览器 Cookie 架构的安全性不足，传统上是通过 domain 和 path 与 document 的匹配情况来携带。</p><p>恶意页面可以通过诱导点击链接或者通过隐藏的 iframe 提交 form 表单（通常自动提交），让用户打开恶意页面就可能触发请求，由于带着 Cookie，这个请求在服务端会被认为是合法的。</p><h1 id="CSRF-攻击的特点："><a href="#CSRF-攻击的特点：" class="headerlink" title="CSRF 攻击的特点："></a>CSRF 攻击的特点：</h1><ol><li>可以权限提升；</li><li>具有隐蔽性（被攻击者不易察觉）；</li></ol><h1 id="CSRF-防御设计的应用范围："><a href="#CSRF-防御设计的应用范围：" class="headerlink" title="CSRF 防御设计的应用范围："></a>CSRF 防御设计的应用范围：</h1><ol><li>对于触发数据修改的接口；</li><li>对于获取敏感信息的接口；</li></ol><h1 id="典型的-CSRF-攻击示例"><a href="#典型的-CSRF-攻击示例" class="headerlink" title="典型的 CSRF 攻击示例"></a>典型的 CSRF 攻击示例</h1><h2 id="Forge-GET"><a href="#Forge-GET" class="headerlink" title="Forge GET"></a>Forge GET</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://mysite.com/transfer.do?acct=MARIA&amp;amount=100000"</span>&gt;</span>View my Pictures!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://mysite.com/transfer.do?acct=MARIA&amp;amount=100000"</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Forge-POST"><a href="#Forge-POST" class="headerlink" title="Forge POST"></a>Forge POST</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/action\_page\_binary.asp"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fname"</span>&gt;</span>First name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fname"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lname"</span>&gt;</span>Last name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"lname"</span> <span class="attr">name</span>=<span class="string">"lname"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSRF-攻击的示例步骤："><a href="#CSRF-攻击的示例步骤：" class="headerlink" title="CSRF 攻击的示例步骤："></a>CSRF 攻击的示例步骤：</h2><h3 id="CSRF-GET："><a href="#CSRF-GET：" class="headerlink" title="CSRF GET："></a>CSRF GET：</h3><ol><li>Bob 创建了含有 GET 请求的恶意链接</li><li>Bob 通过聊天工具、邮件或网站传播恶意链接</li><li>Alice 点击了恶意链接</li><li>以 Alice 的身份发起了 GET 请求</li><li>服务端以 Alice 认证的 Cookie 来处理请求</li><li>服务端按照 Alice 的身份更新了状态（Alice 并不知情）</li></ol><h3 id="CSRF-POST："><a href="#CSRF-POST：" class="headerlink" title="CSRF POST："></a>CSRF POST：</h3><ol><li>Bob 创建了恶意网页</li><li>Bob 传播该网页</li><li>Alice 点击恶意网页并提交了表单（可能有填写动作、也可能是自动提交）</li><li>表单发起提交到另一个站点的 POST 请求</li><li>服务端以 Alice 身份处理 POST 请求</li><li>服务端状态已改变</li></ol><h1 id="CSRF-攻击手段："><a href="#CSRF-攻击手段：" class="headerlink" title="CSRF 攻击手段："></a>CSRF 攻击手段：</h1><h2 id="通过恶意页面上的-URL-或者-form-表单（通常使用-JavaScript-自动提交）："><a href="#通过恶意页面上的-URL-或者-form-表单（通常使用-JavaScript-自动提交）：" class="headerlink" title="通过恶意页面上的 URL 或者 form 表单（通常使用 JavaScript 自动提交）："></a>通过恶意页面上的 URL 或者 form 表单（通常使用 JavaScript 自动提交）：</h2><p>让用户打卡恶意页面就触发请求，由于带着 Cookie，这个请求在服务端会被认为是合法的。</p><h2 id="攻击者有权限在本域发布内容（UGC-场景）："><a href="#攻击者有权限在本域发布内容（UGC-场景）：" class="headerlink" title="攻击者有权限在本域发布内容（UGC 场景）："></a>攻击者有权限在本域发布内容（UGC 场景）：</h2><p>CSRF 攻击大多数情况下来自第三方域名，但并不能排除可能从本域发起的攻击。如果攻击者有权限在网站（本域）发布评论（尤其是可以设置链接、图片等），那么它可以直接在本域发起攻击，这种情况下<strong>同源策略</strong>无法达到防护的作用。</p><h2 id="服务端请求伪造（SSRF，Server-Side-Request-Forgery）："><a href="#服务端请求伪造（SSRF，Server-Side-Request-Forgery）：" class="headerlink" title="服务端请求伪造（SSRF，Server Side Request Forgery）："></a>服务端请求伪造（SSRF，Server Side Request Forgery）：</h2><p>这类攻击本质上是一种注入。利用了服务端的有代理请求功能：服务端可能根据用户的输入，在服务端构造一个 URL，并向其发起请求，通过访问其他的服务端资源来完成正常的页面展示。</p><p>这类情况下，如果恶意用户提交的 URL 是操作内网的敏感资源，就可能意外修改的服务端资源的状态，也可能通过一系列操作“提权”成功。由于请求是从内往发起，往往已经绕过大部分的认证和授权机制，这一 “action” 就会具备很高的权限，所以 SSRF 很可能产生非常严重的后果。</p><p>不幸的是，对于各种注入攻击，往往难以 100% 发现和防范，越是功能复杂的网站越是如此。</p><h3 id="SSRF-示例："><a href="#SSRF-示例：" class="headerlink" title="SSRF 示例："></a>SSRF 示例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;image.mysite.com&#x2F;search&#x2F;detail?callback_url&#x3D;127.0.0.1:8081&#x2F;update&#x2F;1&#x2F;1</span><br></pre></td></tr></table></figure><p>攻击者可能通过 SSRF 直接提权，也可能通过 SSRF 拿到了服务端返回的内部错误提示、源码等信息，根据这些信息可能找到了一个 SQL 注入的漏洞，再利用 SQL 注入攻击拿到内网的命令执行权限。</p><h1 id="CSRF-防御手段："><a href="#CSRF-防御手段：" class="headerlink" title="CSRF 防御手段："></a>CSRF 防御手段：</h1><h2 id="通过浏览器原生-Header："><a href="#通过浏览器原生-Header：" class="headerlink" title="通过浏览器原生 Header："></a>通过浏览器原生 Header：</h2><p>这个防御策略主要针对 CSRF 最常规的情况——跨域场景。它的设计思路是在服务端拦截外域（不受信任的域名）对服务端发起的请求。在 HTTP 协议中，有两个 Header 字段可以用来判断来源域：Origin 和 Referer。</p><p>浏览器发送请求时，这两个字段会自动携带，而且前端 JavaScript 代码无法对其进行修改。Origin 和 Referer 的规则在老旧浏览器上会有差异（可能不支持，也就无法起到防御的作用）。</p><h2 id="通过浏览器-Custom-Header："><a href="#通过浏览器-Custom-Header：" class="headerlink" title="通过浏览器 Custom Header："></a>通过浏览器 Custom Header：</h2><p>通过 JavaScript 添加自定义的 Header 字段。缺点主要是使用成本（代码的侵入性）。</p><h2 id="CSRF-Token："><a href="#CSRF-Token：" class="headerlink" title="CSRF Token："></a>CSRF Token：</h2><p>CSRF Token 是比较彻底的防御 CSRF 攻击的方法，可以防御从简单到复杂的各种情况（比如同域、XSS 等）。它的原理是将 CSRF Token 放在 HTTP Header 或者请求参数中，服务端对其进行校验。</p><h3 id="CSRF-Token-应该满足三个特性："><a href="#CSRF-Token-应该满足三个特性：" class="headerlink" title="CSRF Token 应该满足三个特性："></a>CSRF Token 应该满足三个特性：</h3><ol><li>每个用户唯一</li><li>机密性</li><li>不可预测(Unpredictable)</li></ol><p>如果需要防范本域的CSRF，需要为每一个 form 表单生成唯一的 Token，并且在 form 提交时验证 Token，就是 CSRF Token 的实现思路，但是 Token 需要保证不可预测，并且要区分内链、外链（避免将 Token 发送给其他服务器造成 Token 泄漏）。</p><p>一个优化手段是无状态（stateless）CSRF Token（服务端保存密钥），利用密码学原理，不需要服务端保存每个 Token，而是只需要保存一个密钥，Token 都根据这个密钥生成，给每个用户的 Token 加盐（salt）。如此一来，既可以保证能够识别这个 Token 是否是服务端生成的（其他人无法伪造），也可以保证每个用户的 Token 不相同（其他人无法猜到我的 Token 是什么）。</p><p>这种无状态设计是很多开发领域都推崇的设计原则，它的优点在于占用的服务器资源更少，而且通常能够通过减少耦合有效降低系统的复杂性。</p><h3 id="koa-csrf-的防御方式（Stateless-CSRF-Token）："><a href="#koa-csrf-的防御方式（Stateless-CSRF-Token）：" class="headerlink" title="koa csrf 的防御方式（Stateless CSRF Token）："></a>koa csrf 的防御方式（Stateless CSRF Token）：</h3><p>koa csrf 的实现方式就是无状态的 CSRF Token，即前面所述的服务端只保存一个密钥。好处也是显而易见的，对于分布式 Web 应用，为了达到同步状态的效果，Session 会使用中间件存储或者动态计算。koa 的中间件存储方案就是将 Token 存储在 Redis 上，这样可以保证不同服务器取得的同一登录用户的 Session 值一致；由于 koa csrf 的密钥存储在 Session 中，可以保证任何一台分布式服务器取到 Token 后都可以执行解密操作并进行数据正确性比对。</p><h3 id="koa-csrf-相关源码"><a href="#koa-csrf-相关源码" class="headerlink" title="koa csrf 相关源码"></a>koa csrf 相关源码</h3><p><a href="https://github.com/koajs/csrf" target="_blank" rel="noopener">https://github.com/koajs/csrf</a><br><a href="https://github.com/pillarjs/csrf" target="_blank" rel="noopener">https://github.com/pillarjs/csrf</a></p><h2 id="超短期-Cookie"><a href="#超短期-Cookie" class="headerlink" title="超短期 Cookie"></a>超短期 Cookie</h2><p>具体的 Token 发送方式，还有一种是使用超短期 Cookie；如1秒后就过期的Cookie，在请求时候前端 set 这个超短期 Cookie。</p><h2 id="Double-Submit-Cookie"><a href="#Double-Submit-Cookie" class="headerlink" title="Double Submit Cookie"></a>Double Submit Cookie</h2><p>Double Submit Cookie 基本都设计为无状态，因为使用这种方式本身就是出于便利性的考虑。服务端将满足随机性的 CSRF Token 放在 Cookie 中，浏览器端发起请求时将这个 Token 放在请求参数或 HTTP Header 中。</p><p>考虑 UGC 场景和<strong>子域安全性</strong>的话，需要将 Cookie 中的 Token 加密 &#x2F; hash（消息摘要）&#x2F; HMAC。</p><h3 id="egg-主要使用-Double-Submit-Cookie-策略"><a href="#egg-主要使用-Double-Submit-Cookie-策略" class="headerlink" title="egg 主要使用 Double Submit Cookie 策略"></a>egg 主要使用 Double Submit Cookie 策略</h3><p><a href="https://github.com/eggjs/egg/issues/260" target="_blank" rel="noopener">https://github.com/eggjs/egg/issues/260</a></p><h3 id="egg-csrf-源码"><a href="#egg-csrf-源码" class="headerlink" title="egg csrf 源码"></a>egg csrf 源码</h3><p><a href="https://github.com/eggjs/egg-security" target="_blank" rel="noopener">https://github.com/eggjs/egg-security</a></p><h3 id="Double-Submit-Cookie-与-Login-Cookie-和-CSRF-Token-的关系"><a href="#Double-Submit-Cookie-与-Login-Cookie-和-CSRF-Token-的关系" class="headerlink" title="Double Submit Cookie 与 Login Cookie 和 CSRF Token 的关系"></a>Double Submit Cookie 与 Login Cookie 和 CSRF Token 的关系</h3><ol><li>CSRF Token 与 Cookie 没有必然联系，只要满足 CSRF Token 应该满足的那三个特性就可以，比如还可以放在 input type&#x3D;”hidden” 中，甚至任何资源中（动态html、js）；</li><li>无状态又没有过期时间的情况下，如果 Token 泄漏就可以重放攻击，或者在本域攻击的条件下用低敏感操作的 Token 做高敏感操作；</li><li>登录认证的安全性与 csrf 侧重点不同，所以通常不使用同一个 Cookie，其实用同一个也可以。登录认证可能是需要加密解密的信息（成本高于 csrf 的 hash&#x2F;hmac），那么认证信息也就不能是无状态的；</li><li>如果登录认证使用无状态 Token 校验（服务端只需要知道这个 Token 是不是自己生成的，不需要解密或者不需要其他状态信息），可以当 CSRF Token 使用；</li></ol><h2 id="SameSite-Cookie"><a href="#SameSite-Cookie" class="headerlink" title="SameSite Cookie"></a>SameSite Cookie</h2><p>SameSite Cookie 就是浏览器为增强 Cookie 安全性而打的补丁之一。从 Chrome 80 开始，如果开发者不做设置，则当作 SameSite&#x3D;Lax 对待（规则见下文）。这也是文章开头说很多“传统的” CSRF 攻击手段已经失效的原因，即浏览器对第三方 Cookie 的限制越来越严格了。</p><h3 id="设置为-Strict"><a href="#设置为-Strict" class="headerlink" title="设置为 Strict"></a>设置为 Strict</h3><p>完全禁止第三方 Cookie。</p><h3 id="设置为-Lax"><a href="#设置为-Lax" class="headerlink" title="设置为 Lax"></a>设置为 Lax</h3><p>携带 Cookie：</p><ol><li>从第三方站点的链接打开；</li><li>预加载请求；</li><li>从第三方站点提交 Get 表单；</li></ol><p>不会携带 Cookie：</p><ol><li>第三方站点 Post 表单；</li><li>通过 img、iframe、script 等标签加载的 URL；</li></ol><h3 id="设置为-None"><a href="#设置为-None" class="headerlink" title="设置为 None"></a>设置为 None</h3><p>不针对第三方 Cookie 进行限制。</p><h2 id="通过人机交互手段进行防御"><a href="#通过人机交互手段进行防御" class="headerlink" title="通过人机交互手段进行防御"></a>通过人机交互手段进行防御</h2><ol><li>验证码</li><li>人脸识别</li></ol><p>比 CSRF Token 更可靠的方式是验证码、人脸识别等“人工形态的 CSRF Token”。当然，缺点也非常明显，需要中断操作流程，对用户是个强打扰。</p><h1 id="GET-与-POST-“真正”的区别"><a href="#GET-与-POST-“真正”的区别" class="headerlink" title="GET 与 POST “真正”的区别"></a>GET 与 POST “真正”的区别</h1><p>从安全层面来说，GET 与 POST 真正的区别在于，GET 是一种缺省操作，很多时候出于业务需要，不得不放行 GET 请求。</p><p>例如来自搜索引擎页面或者其他正常站点的链接，用户点击之后的跳转就是 GET 请求，不应该判定为 CSRF 攻击。由此可见，如果 Web 应用实现上允许用户通过 GET 请求发送敏感操作，更容易出现问题，所以敏感操作不使用 GET 请求通常是一个好的实践。</p><h1 id="JSON-劫持（JSON-Hijacking）"><a href="#JSON-劫持（JSON-Hijacking）" class="headerlink" title="JSON 劫持（JSON Hijacking）"></a>JSON 劫持（JSON Hijacking）</h1><p>JSON 劫持是指通过 script 标签可以载入跨域资源的特性，获取接口数据或者执行恶意的 JSONP callback function。</p><p>实际上，由于 SameSite&#x3D;Lax 的保护（通过 script 标签加载时不会发送 Cookie），再加上 JavaScript 原生对象劫持的失效，这是个基本已经失效的攻击方式（由于 JavaScript 语言的动态性极强，相对容易出现这类劫持漏洞，也许还有新的劫持方法），下面的示例只用于理解攻击意图。</p><h2 id="示例：利用-JavaScript-原生对象劫持"><a href="#示例：利用-JavaScript-原生对象劫持" class="headerlink" title="示例：利用 JavaScript 原生对象劫持"></a>示例：利用 JavaScript 原生对象劫持</h2><p>攻击者可以在自己的站点通过 script 标签载入接口数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.mysite.com/api/getXXX"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户已登陆 <a href="http://www.mysite.com/" target="_blank" rel="noopener">www.mysite.com</a> 的情况下，如果访问了这个恶意页面，因为 script 标签会自动解析返回的 JSON 数据，攻击者通过 Object.prototype.<strong>defineSetter</strong> 劫持原生对象的行为，触发攻击。</p><h2 id="示例：利用-JSONP-callback-function"><a href="#示例：利用-JSONP-callback-function" class="headerlink" title="示例：利用 JSONP callback function"></a>示例：利用 JSONP callback function</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">doSomeAction</span> <span class="params">(v)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(v);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.mysite.com/api/getXXX?callback=doSomeAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>攻击者通过指定自己的恶意 JSONP callback function 进行攻击。</p><h2 id="对-JSON-劫持的防御"><a href="#对-JSON-劫持的防御" class="headerlink" title="对 JSON 劫持的防御"></a>对 JSON 劫持的防御</h2><ol><li>对于敏感 Cookie 不使用 SameSite&#x3D;None；</li><li>在获取的字符串第一行设置死循环语句。自己的程序中，获取数据时先当作字符串，去掉第一行，再 Parse JSON String；</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://owasp.org/www-community/attacks/csrf" target="_blank" rel="noopener">Cross Site Request Forgery (CSRF)</a></li><li><a href="https://danilocesar.hashnode.dev/understanding-cross-site-request-forgery-csrf-or-xsrf" target="_blank" rel="noopener">Understanding Cross-Site Request Forgery (CSRF or XSRF)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSRF-概述：&quot;&gt;&lt;a href=&quot;#CSRF-概述：&quot; class=&quot;headerlink&quot; title=&quot;CSRF 概述：&quot;&gt;&lt;/a&gt;CSRF 概述：&lt;/h1&gt;&lt;p&gt;CSRF 就是 Cross Site Request Forgery，跨站请求伪造。这种攻击利用了浏览器端状态（Cookie）管理规则与服务端鉴权规则。CSRF 在攻击过程中不需要获取到用户的登录凭据，而是借用户之手发出恶意请求。&lt;/p&gt;
&lt;p&gt;CSRF 的存在是由于 Cookie 架构的设计“非常古老”，已经有些不适应网络安全的需要。但是如下文所述，现代浏览器已经给 Cookie 规则打了很多“补丁”，安全性大大提升。实际上，现代浏览器条件下，很多“传统的” CSRF 攻击手段已经失效，但是由于网络安全的短板效应，永远不能放松警惕，只有深入理解攻击方式的来龙去脉，才能从整体上尽可能确保安全。&lt;/p&gt;
&lt;p&gt;另一个 Web 开发者常听说的攻击方式叫 XSS（Cross Site Scripting），跨站脚本，了解它的人应该更多一些。相比而言，CSRF 攻击构造起来可以更简单，更低成本，但是攻击方式更精巧，背后的原理的也更复杂一些。更容易导致混乱的地方在于，不同的攻击方式可能混合出现。比如考虑到 UGC（User-generated content）场景下可能出现的 CSRF，就变得比典型的 CSRF 要复杂。对于整体防御思路来说，是很大的挑战。&lt;/p&gt;
&lt;p&gt;狭义上的 CSRF 知识不难理解，但要深入理解就比较繁琐，因为网络安全的事情往往都是很多不同层面的知识互相关联，CSRF 尤其如此。&lt;/p&gt;
&lt;h1 id=&quot;与-CSRF-关系密切的领域：&quot;&gt;&lt;a href=&quot;#与-CSRF-关系密切的领域：&quot; class=&quot;headerlink&quot; title=&quot;与 CSRF 关系密切的领域：&quot;&gt;&lt;/a&gt;与 CSRF 关系密切的领域：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;网络协议&lt;/li&gt;
&lt;li&gt;浏览器特性&lt;/li&gt;
&lt;li&gt;API设计&lt;/li&gt;
&lt;li&gt;认证方式&lt;/li&gt;
&lt;li&gt;密码学&lt;/li&gt;
&lt;li&gt;社会工程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见，CSRF 本身不复杂，甚至看起来比较简单，但是每个相关的领域，都是个非常深的坑，本文会尽可能设计到足够广的领域。阅读本文之后，会发现每个领域的知识都有很多可以继续探索的地方。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="CSRF" scheme="http://alphabao.github.io/tags/CSRF/"/>
    
      <category term="Cookie" scheme="http://alphabao.github.io/tags/Cookie/"/>
    
      <category term="网络安全" scheme="http://alphabao.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript await 进阶指南</title>
    <link href="http://alphabao.github.io/2022/03/11/javascript-await-advanced-guide/"/>
    <id>http://alphabao.github.io/2022/03/11/javascript-await-advanced-guide/</id>
    <published>2022-03-10T16:20:55.000Z</published>
    <updated>2022-03-19T13:00:34.898Z</updated>
    
    <content type="html"><![CDATA[<p>如果了解 Promise 以及 async&#x2F;await 的基本使用，就已经足以写出异步流程控制代码，但还有一些略微反直觉、容易记错的点，这些点基本都与 await 有关，本文是对此的一些整理和解析（示例代码大部分来自 MDN，对这些示例代码的解析并非照搬 MDN 原文）。</p><h3 id="Promise-正常处理完成"><a href="#Promise-正常处理完成" class="headerlink" title="Promise 正常处理完成"></a>Promise 正常处理完成</h3><p>await 关键字用于在 async function 的局部上下文中挂起（交出局部程序的执行权），直至右边的 Promise 返回。</p><p>最常规的情况是，await 操作符右边是一个 Promise，由于 await 将异步函数上下文中的执行权切换到了这个 Promise，这个 Promise 正常处理完成并返回其处理结果后，异步函数后续的语句才开始执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAfter2Seconds</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">await</span> resolveAfter2Seconds(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Thenable-objects"><a href="#Thenable-objects" class="headerlink" title="Thenable objects"></a>Thenable objects</h3><p>await 操作符右边还可以是 Thenable objects，也将同样会按照 resolve 或 reject 的执行来决定返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> thenable = &#123;</span><br><span class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, _reject</span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">'resolved!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> thenable); <span class="comment">// resolved!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2();</span><br></pre></td></tr></table></figure><p>这个行为其实是为了与 Promise 的行为相匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> thenable = &#123;</span><br><span class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, _reject</span>) </span>&#123;</span><br><span class="line">      resolve(<span class="string">'resolved!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(thenable)); <span class="comment">// resolved!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2();</span><br></pre></td></tr></table></figure><h3 id="转化为-Promise"><a href="#转化为-Promise" class="headerlink" title="转化为 Promise"></a>转化为 Promise</h3><p>await 右边的 value 如果不是 Promise，则处理为 Promise.resolve(value)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="keyword">await</span> <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(y); <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f3();</span><br></pre></td></tr></table></figure><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>如果 Promise 的执行中发生 reject，await 位置将抛出异常，reject 的值可以被 try catch 捕获。这里还可以看出，应该尽量抛出原生 Error，否则会丢失错误堆栈信息，而且 catch 到的值如果是各种类型都可能出现，处理起来也会更复杂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="number">30</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e); <span class="comment">// 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f4();</span><br></pre></td></tr></table></figure><p>需要注意的是如果没有 await 操作符，即使在 return 语句中也无法被 try catch 捕获。不能捕获的原因，可以理解为没有使用 await 将异步操作“同步化”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="number">30</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e); <span class="comment">// 无法捕获</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能被 catch 捕获，因为 return Promise.reject(30) 这一行并没有使用 await 将异步操作“同步化”</span></span><br><span class="line">f4(); <span class="comment">// Uncaught (in promise) 30</span></span><br></pre></td></tr></table></figure><p>这个例子还有一个变体，就是使用 Promise.reject(30).catch(e &#x3D;&gt; e) 处理异常，可以用在不希望被 reject 干扰程序执行流程的情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="number">30</span>).catch(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e); <span class="comment">// 不会到达这里</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f4();</span><br></pre></td></tr></table></figure><p>如果 Promise 中存在不受 Promise 流程控制的 setTimeout 之类的异步流程，并且发生异常，下面两种 catch 均不能捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">await</span> <span class="built_in">Promise</span></span><br><span class="line">      .resolve(setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">      &#125;))</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e); <span class="comment">// 不会到达这里</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f4(); <span class="comment">// Uncaught Error</span></span><br></pre></td></tr></table></figure><p>更容易理解的一个例子是这样，意图是总能得到一个 response 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> response = <span class="keyword">await</span> promisedFunction().catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.error(err); &#125;);</span><br><span class="line"><span class="comment">// 总是得到一个 response，如果 rejected，response 就是 undefined</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener">await - JavaScript | MDN</a></li><li><a href="https://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/" target="_blank" rel="noopener">Checklist: Best Practices of Node.JS Error Handling (2018)</a></li><li><a href="https://www.ituring.com.cn/book/2452" target="_blank" rel="noopener">深入理解 JavaScript 特性</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果了解 Promise 以及 async&amp;#x2F;await 的基本使用，就已经足以写出异步流程控制代码，但还有一些略微反直觉、容易记错的点，这些点基本都与 await 有关，本文是对此的一些整理和解析（示例代码大部分来自 MDN，对这些示例代码的解析并非照搬 MDN 原文）。&lt;/p&gt;
&lt;h3 id=&quot;Promise-正常处理完成&quot;&gt;&lt;a href=&quot;#Promise-正常处理完成&quot; class=&quot;headerlink&quot; title=&quot;Promise 正常处理完成&quot;&gt;&lt;/a&gt;Promise 正常处理完成&lt;/h3&gt;&lt;p&gt;await 关键字用于在 async function 的局部上下文中挂起（交出局部程序的执行权），直至右边的 Promise 返回。&lt;/p&gt;
&lt;p&gt;最常规的情况是，await 操作符右边是一个 Promise，由于 await 将异步函数上下文中的执行权切换到了这个 Promise，这个 Promise 正常处理完成并返回其处理结果后，异步函数后续的语句才开始执行。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;resolveAfter2Seconds&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resolve(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; resolveAfter2Seconds(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x); &lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f1();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="异步" scheme="http://alphabao.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="异常处理" scheme="http://alphabao.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的继承：ES3、ES5 和 ES6</title>
    <link href="http://alphabao.github.io/2017/12/31/inheritance-in-javascript-es3-es5-and-es6/"/>
    <id>http://alphabao.github.io/2017/12/31/inheritance-in-javascript-es3-es5-and-es6/</id>
    <published>2017-12-31T01:28:31.000Z</published>
    <updated>2022-03-19T13:00:34.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择一种继承方式"><a href="#选择一种继承方式" class="headerlink" title="选择一种继承方式"></a>选择一种继承方式</h2><p>JavaScript 是一门动态语言，动态意味着高灵活性，而这尤其可以体现在继承上面。JavaScript 中的继承有很多种实现方式，可以分成下面四类：</p><ol><li>Mixin 模式，即属性混入，从一个或多个对象中复制属性到新的对象中</li><li>方法借用模式，即通过 call 或 apply 实现方法的重用</li><li>原型模式，使用 Object.create 方法直接以一个对象为原型创造新的对象</li><li>类模式，实际上是使用构造函数或 ES6 class</li></ol><p>前三种有一个共同点，就是没有“类”的概念，它们在适当的场景下非常有用，不过也因为没有类，缺失了很多经典面向对象继承的要素。例如父子对象之间没有严格的传承关系，即不一定是 is-a 的关系，这决定了无法将它们直接应用在面向对象分析与设计方面，可以说它们并不是真正的继承，而是介于继承和组合之间的代码复用方案。</p><p>而第四种，类式继承，无论是使用构造函数还是 ES6 加入的 class，都能表达明确的继承关系，在需要对继承重度使用的场景下，应该使用类式继承。接下来，本文讨论的都是类式继承。</p><p>有一点需要牢记：继承是一种强耦合，应该谨慎使用。<a id="more"></a></p><h2 id="如何学习-JavaScript-中的继承"><a href="#如何学习-JavaScript-中的继承" class="headerlink" title="如何学习 JavaScript 中的继承"></a>如何学习 JavaScript 中的继承</h2><p>理解 JavaScript 里面的类继承实现方式，我认为最好的方法是——找一门面向对象机制更为完善的语言，去理解其中的继承。实际上，JavaScript 中以前就有的 new 和 ES6 加入的 class，都是参考自 Java 语言。</p><p>不过，这样的对照学习是有前提条件的，即首先掌握 JavaScript 中的原型、原型链和作用域，否则很容易误解 JavaScript 本质的执行机制。如果已经理解了这些前置知识，就可以探索一下 JavaScript 中的继承了。</p><h2 id="用-ES3-实现继承"><a href="#用-ES3-实现继承" class="headerlink" title="用 ES3 实现继承"></a>用 ES3 实现继承</h2><p>实现要点：</p><ol><li>利用 Person.call(this) 执行“方法借用”，获取 Person 的属性</li><li>利用一个空函数将 Person.prototype 加入原型链</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bob</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, <span class="string">"Bob"</span>);</span><br><span class="line">  <span class="keyword">this</span>.hobby = <span class="string">"Histroy"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritProto</span>(<span class="params">Parent, Child</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  Fn.prototype = Parent.prototype;</span><br><span class="line">  Child.prototype = <span class="keyword">new</span> Fn();</span><br><span class="line">  Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritProto(Person, Bob);</span><br><span class="line"></span><br><span class="line">Bob.prototype.printHobby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.hobby);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="keyword">new</span> Bob());</span><br></pre></td></tr></table></figure><p>dir 输出：</p><pre><code>Bob  |-- hobby:&quot;Histroy&quot;  |-- name:&quot;Bob&quot;  |-- __proto__:Person      |-- printHobby:ƒ ()      |-- constructor:ƒ Bob()      |-- __proto__:          |-- printName:ƒ ()          |-- constructor:ƒ Person(name)          |-- __proto__:Object</code></pre><h2 id="用-ES5-实现继承"><a href="#用-ES5-实现继承" class="headerlink" title="用 ES5 实现继承"></a>用 ES5 实现继承</h2><p>实现要点：</p><ol><li>利用 Person.call(this) 执行“方法借用”，获取 Person 的属性</li><li>利用 ES5 增加的 Object.create 方法将 Person.prototype 加入原型链</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bob</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, <span class="string">"Bob"</span>);</span><br><span class="line">  <span class="keyword">this</span>.hobby = <span class="string">"Histroy"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bob.prototype  = <span class="built_in">Object</span>.create(Person.prototype, &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: &#123;</span><br><span class="line">    value: Bob,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Bob.prototype.printHobby = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.hobby);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="keyword">new</span> Bob());</span><br></pre></td></tr></table></figure><p>dir 输出：</p><pre><code>Bob  |-- hobby:&quot;Histroy&quot;  |-- name:&quot;Bob&quot;  |-- __proto__:Person      |-- printHobby:ƒ ()      |-- constructor:ƒ Bob()      |-- __proto__:          |-- printName:ƒ ()          |-- constructor:ƒ Person(name)          |-- __proto__:Object</code></pre><h2 id="用-ES6-实现继承"><a href="#用-ES6-实现继承" class="headerlink" title="用 ES6 实现继承"></a>用 ES6 实现继承</h2><p>实现要点：</p><ol><li>利用 ES6 增加的 class 和 extends 实现比以前更完善的继承</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bob</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Bob"</span>);</span><br><span class="line">    <span class="keyword">this</span>.hobby = <span class="string">"Histroy"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printHobby() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.hobby);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="keyword">new</span> Bob());</span><br></pre></td></tr></table></figure><p>dir 输出：</p><pre><code>Bob  |-- hobby:&quot;Histroy&quot;  |-- name:&quot;Bob&quot;  |-- __proto__:Person      |-- constructor:class Bob      |-- printHobby:ƒ printHobby()      |-- __proto__:          |-- constructor:class Person          |-- printName:ƒ printName()          |-- __proto__:Object</code></pre><h2 id="从-class-和-super-看-JavaScript-与-Java-的继承"><a href="#从-class-和-super-看-JavaScript-与-Java-的继承" class="headerlink" title="从 class 和 super 看 JavaScript 与 Java 的继承"></a>从 class 和 super 看 JavaScript 与 Java 的继承</h2><p>编写代码时，ES6 class 带来的最明显的两个便利是：</p><ol><li>隐藏原型链的拼接过程，将代码的重点放在类型之间的传承</li><li>使用 super 来实现更简化、更灵活的多态方法</li></ol><p>实际上，ES6 围绕 class 增加了很多新功能，比如继承这件事情上，与之前不同的是：用 class 实现的继承，既包括类实例的继承关系，也包括类本身的继承关系。这里的类其实是特殊的 JavaScript 函数，而在 JavaScript 中，函数是对象的子类型，即函数对象，所以也能够体现出原型继承。</p><p>例如，用前面的代码来说明就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类实例的继承关系</span></span><br><span class="line">Bob.prototype.__proto__ === Person.prototype <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类本身的继承关系</span></span><br><span class="line">Bob.__proto__ === Person <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>再来看 ES6 中的 super，子类的方法想借助父类的方法完成一部分工作时，super 就可以派上用场了，这是比继承更为细粒度的代码复用，不过耦合性也也变得更强了。实际上 super 也有很多功能，既可以当作函数使用，也可以当作对象使用。将 class 和 super 结合起来看，就可以领会一下 JavaScript 与 Java 在继承上的异同了。</p><p>与 Java 相同或非常类似的是：</p><ul><li>在子类构造方法中调用父类的构造方法。ES6 中，子类的构造器中必须调用父类的构造器来完成初始化，子类的实例是基于父类实例的加工。正是因此，父类的所有行为都可以继承。所以，ES6 中可以继承原生数据结构的完整功能，在此基础上定义自己的数据结构。就像 Java 中继承 HashMap 类，JavaScript 可以继承 Number、Array 等构造函数。</li></ul><p>与 Java 不同的是：</p><ul><li>在普通方法中，super 可以调用的是父类的原型对象上的方法（可以理解为 super 此时指向父类的原型对象）；在静态方法中，super 可以调用父类的静态方法（可以理解为 super 此时指向父类）。而在 Java 中，通过 super 可以访问父类中被覆盖的同名变量或者方法，要访问静态方法则是通过“类名.方法名”或“对象名.方法名”。</li></ul><p>比较后可见，真的是和 Java 非常类似。</p><p>结合前面的内容，可以发现从 ES3 到 ES6，JavaScript 中的面向对象部分一直是在向 Java 靠拢的。尤其增加了 class 和 extends 关键字之后，靠拢了一大步。但这些并没有改变 JavaScript 是基于原型这一实质。Java 中的类就像对象的设计图，每次调用 new 创建一个新的对象，就产生一个独立的对象占用独立的内存空间；而在 JavaScript，继承所做工作实际上是在构造原型链，所有子类的实例共享的是同一个原型。所以 JavaScript 中调用父类的方法实际上是在不同的对象上调用同一个方法，即“方法借用”，这种行为实际上是“委托（delegation）”调用。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ol><li><a href="http://es6.ruanyifeng.com/#docs/class-extends#super-%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noopener">ECMAScript 6 入门：Class 的继承 - super 关键字</a></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://github.com/jayli/javascript-patterns/blob/master/chapter6.markdown#%E7%B1%BB%E5%BC%8F%E7%BB%A7%E6%89%BF-vs-%E7%8E%B0%E4%BB%A3%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">《JavaScript模式》- 类式继承 vs 现代继承模式</a></li><li><a href="http://www.ituring.com.cn/book/946" target="_blank" rel="noopener">《JavaScript高级程序设计（第3版）》- 面向对象的程序设计</a></li><li><a href="http://www.ituring.com.cn/book/1488" target="_blank" rel="noopener">《你不知道的JavaScript》- this和对象原型</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选择一种继承方式&quot;&gt;&lt;a href=&quot;#选择一种继承方式&quot; class=&quot;headerlink&quot; title=&quot;选择一种继承方式&quot;&gt;&lt;/a&gt;选择一种继承方式&lt;/h2&gt;&lt;p&gt;JavaScript 是一门动态语言，动态意味着高灵活性，而这尤其可以体现在继承上面。JavaScript 中的继承有很多种实现方式，可以分成下面四类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mixin 模式，即属性混入，从一个或多个对象中复制属性到新的对象中&lt;/li&gt;
&lt;li&gt;方法借用模式，即通过 call 或 apply 实现方法的重用&lt;/li&gt;
&lt;li&gt;原型模式，使用 Object.create 方法直接以一个对象为原型创造新的对象&lt;/li&gt;
&lt;li&gt;类模式，实际上是使用构造函数或 ES6 class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前三种有一个共同点，就是没有“类”的概念，它们在适当的场景下非常有用，不过也因为没有类，缺失了很多经典面向对象继承的要素。例如父子对象之间没有严格的传承关系，即不一定是 is-a 的关系，这决定了无法将它们直接应用在面向对象分析与设计方面，可以说它们并不是真正的继承，而是介于继承和组合之间的代码复用方案。&lt;/p&gt;
&lt;p&gt;而第四种，类式继承，无论是使用构造函数还是 ES6 加入的 class，都能表达明确的继承关系，在需要对继承重度使用的场景下，应该使用类式继承。接下来，本文讨论的都是类式继承。&lt;/p&gt;
&lt;p&gt;有一点需要牢记：继承是一种强耦合，应该谨慎使用。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="class" scheme="http://alphabao.github.io/tags/class/"/>
    
      <category term="继承" scheme="http://alphabao.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="面向对象" scheme="http://alphabao.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>归并排序与快速排序的简明实现及对比</title>
    <link href="http://alphabao.github.io/2017/12/07/merge-sort-and-quick-sort/"/>
    <id>http://alphabao.github.io/2017/12/07/merge-sort-and-quick-sort/</id>
    <published>2017-12-07T12:33:54.000Z</published>
    <updated>2022-03-19T13:00:34.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>归并排序与快速排序是两种有实际应用的排序算法，它们有一些共同的特点，整体思路上也比较相近。本文会从更简单的一些排序算法开始，过渡到归并排序和快速排序的实现，并对它们做一些简单的对比思考和总结。在这之前，先简单介绍一下排序算法的意义。</p><p>排序算法就是将一串数据依照特定排序方式进行排列，它们在计算机科学中有大量研究以及应用。</p><p>想象一下下列场景：</p><ol><li>从通讯录中寻找某个联系人</li><li>从一大堆文件中寻找某个文件</li><li>到了影厅之后，寻找电影票上指定的座位</li></ol><p>如果以上情况中，联系人、文件、影厅座位这些“数据”没有按照需要的顺序组织，如何找到想要的特定“数据”呢？会非常麻烦！所以说，对于需要搜索的数据，往往应该先排个序！</p><h2 id="热身一：选择排序"><a href="#热身一：选择排序" class="headerlink" title="热身一：选择排序"></a>热身一：选择排序</h2><p>本文的示例都是数值排序，对于这个问题，最简单直观的方法是：先找出最小的、再找出第二小的、接着找出第三小的……这就是选择排序的思路。<a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = array.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[min] &gt; array[j]) &#123;</span><br><span class="line">        min = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [ array[min], array[i] ] = [ array[i], array[min] ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现解析：</p><ol><li>遍历数组</li><li>找到当前范围内最小的元素，用 minIndex 记录它的下标，第一次遍历时范围就是整个数组</li><li>将下标为 minIndex 的元素的值与当前最小下标的元素交换，第一次遍历时下标最小的元素就是 a[0]</li><li>第二次遍历时，范围就从第二个数据元素的下标开始，那么当前最小下标元素就是 a[1]</li><li>重复交换直至遍历结束</li></ol><p>用一段辅助代码，做一些展示用的示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createUnsortedArray</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> array = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = size; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> num = (i / <span class="number">10</span> &gt; <span class="number">1</span>) ? i : <span class="number">10</span>;</span><br><span class="line">    array.push( <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random(i) * num + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random(i)) * <span class="built_in">Math</span>.random(i) * num * <span class="number">10</span>) );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">fn, size = <span class="number">11</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'------------------------------------------'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Method: <span class="subst">$&#123;fn.name&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'------------------------------------------'</span>);</span><br><span class="line">  <span class="keyword">const</span> array = createUnsortedArray(size);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before:'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(array.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'after:'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(fn(array).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先创建一个随机生成的未排序的数组，然后打印结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show(selectionSort);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line"><span class="comment">// Method: selectionSort</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line"><span class="comment">// before:</span></span><br><span class="line"><span class="comment">// 9,22,3,27,74,54,8,41,80,74,3</span></span><br><span class="line"><span class="comment">// after:</span></span><br><span class="line"><span class="comment">// 3,3,8,9,22,27,41,54,74,74,80</span></span><br></pre></td></tr></table></figure><h2 id="热身二：冒泡排序"><a href="#热身二：冒泡排序" class="headerlink" title="热身二：冒泡排序"></a>热身二：冒泡排序</h2><p>冒泡排序与选择排序有些类似，区别在于冒泡排序是先将最大值冒泡到最后的位置。早在 1956 年，就已经有人研究冒泡排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> first = <span class="number">0</span>, len = array.length; first &lt; len; first++) &#123;</span><br><span class="line">    <span class="keyword">let</span> isSorted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> second = <span class="number">0</span>; second &lt; len - first - <span class="number">1</span>; second++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[second] &gt; array[second + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = array[second];</span><br><span class="line">        array[second] = array[second + <span class="number">1</span>]</span><br><span class="line">        array[second + <span class="number">1</span>] = temp;</span><br><span class="line">        isSorted = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isSorted) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(bubbleSort);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------                                      </span></span><br><span class="line"><span class="comment">// Method: bubbleSort                                                              </span></span><br><span class="line"><span class="comment">// ------------------------------------------                                      </span></span><br><span class="line"><span class="comment">// before:</span></span><br><span class="line"><span class="comment">// 35,8,2,2,8,1,3,4,2,10,4</span></span><br><span class="line"><span class="comment">// after:</span></span><br><span class="line"><span class="comment">// 1,2,2,2,3,4,4,8,8,10,35</span></span><br></pre></td></tr></table></figure><p>实现解析：</p><ol><li>遍历数组</li><li>做第二层遍历，从前到后依次对比相邻两项，前一项的值大于后一项，则交换（冒泡）。第一遍冒泡，将最大的元素值冒泡至最后</li><li>由于每一遍冒泡都确定一个当前最大值并放到当前范围的最后的位置，每一遍的冒泡就可以少检查一个位置</li><li>可以使用一个变量记录当前一遍的冒泡有没有产生元素交换，如果没有，说明当前已经是排序完成的状态，终止循环</li></ol><h2 id="热身三：插入排序"><a href="#热身三：插入排序" class="headerlink" title="热身三：插入排序"></a>热身三：插入排序</h2><p>插入排序的思想在日常生活其实很常见，例如如何排定卢俊义的座次？综合出身、能力、江湖地位、形势人心等各项指标，他在梁山泊排名第二，地位仅次于宋江。这就是插入排序的思路。数据量很小，或类似“给卢俊义排座次”这种在已排序数据中增加一条数据的情况，插入排序优于本文提到的其他排序方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="keyword">const</span> temp = array[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; array[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">      array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    array[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(insertionSort);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------                                      </span></span><br><span class="line"><span class="comment">// Method: insertionSort                                                              </span></span><br><span class="line"><span class="comment">// ------------------------------------------                                      </span></span><br><span class="line"><span class="comment">// before:</span></span><br><span class="line"><span class="comment">// 3,8,68,30,28,56,35,30,2,4,13</span></span><br><span class="line"><span class="comment">// after:</span></span><br><span class="line"><span class="comment">// 2,3,4,8,13,28,30,30,35,56,68</span></span><br></pre></td></tr></table></figure><p>实现解析：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol><h2 id="归并排序（递归实现）"><a href="#归并排序（递归实现）" class="headerlink" title="归并排序（递归实现）"></a>归并排序（递归实现）</h2><p>选择排序和冒泡排序的时间复杂度都是 O(n^2)，很少用在实际工程中；归并排序的时间复杂度是 O(nlog(n))，是实际工程中可选的排序方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">unsorted</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">leftArr, rightArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> lenL = leftArr.length;</span><br><span class="line">    <span class="keyword">const</span> lenR = rightArr.length;</span><br><span class="line">    <span class="keyword">let</span> indexL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> indexR = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (indexL &lt; lenL &amp;&amp; indexR &lt; lenR) &#123;</span><br><span class="line">      <span class="keyword">if</span> (leftArr[indexL] &lt; rightArr[indexR]) &#123;</span><br><span class="line">        result.push(leftArr[indexL++]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(rightArr[indexR++]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (indexL &lt; lenL) &#123;</span><br><span class="line">      result.push(leftArr[indexL++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (indexR &lt; lenR) &#123;</span><br><span class="line">      result.push(rightArr[indexR++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">split</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = array.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> leftArr = array.slice(<span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">const</span> rightArr = array.slice(mid, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge( split(leftArr), split(rightArr) );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> split(unsorted);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(mergeSort);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line"><span class="comment">// Method: mergeSort</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line"><span class="comment">// before:</span></span><br><span class="line"><span class="comment">// 86,55,0,31,104,6,5,49,89,19,6</span></span><br><span class="line"><span class="comment">// after:</span></span><br><span class="line"><span class="comment">// 0,5,6,6,19,31,49,55,86,89,104</span></span><br></pre></td></tr></table></figure><p>实现分析：</p><ol><li>将数组从中间切分为两个数组</li><li>切分到最小之后，开始归并操作，即合并两个已排序的数组</li><li>递归合并的过程，由于是从小到大合并，所以待合并的两个数组总是已排序的，一直做同样的归并操作就可以</li></ol><h2 id="快速排序（递归实现）"><a href="#快速排序（递归实现）" class="headerlink" title="快速排序（递归实现）"></a>快速排序（递归实现）</h2><p>快速排序是实际应用非常多的排序算法，它通常比其他 O(nlog(n)) 时间复杂度的算法更快。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">unsorted</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> pivot = array[ <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>) ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">while</span> (array[left] &lt; pivot) &#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (array[right] &gt; pivot) &#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">        [array[left], array[right]] = [array[right], array[left]];</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> index = partition(array, left, right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">      quick(array, left, index - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &gt; index) &#123;</span><br><span class="line">      quick(array, index, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> quick(unsorted, <span class="number">0</span>, unsorted.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(quickSort);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line"><span class="comment">// Method: quickSort</span></span><br><span class="line"><span class="comment">// ------------------------------------------</span></span><br><span class="line"><span class="comment">// before:</span></span><br><span class="line"><span class="comment">// 41,9,22,4,1,32,10,28,4,94,3</span></span><br><span class="line"><span class="comment">// after:</span></span><br><span class="line"><span class="comment">// 1,3,4,4,9,10,22,28,32,41,94</span></span><br></pre></td></tr></table></figure><p>实现分析：</p><ol><li>将当前数组分区</li><li>分区时先选择一个基准值，再创建两个指针，左边一个指向数组第一个项，右边一个指向数组最后一个项。移动左指针直至找到一个比基准值大的元素，再移动右指针直至找到一个比基准值小的元素，然后交换它们，重复这个过程，直到左指针的位置超过了右指针。如此分区、交换使得比基准值小的元素都在基准值之前，比基准值大的元素都在基准值之后，这就是分区（partition）操作。</li><li>对于上一次分区后的两个区域重复进行分区、交换操作，直至分区到最小。</li></ol><h2 id="对比归并排序与快速排序"><a href="#对比归并排序与快速排序" class="headerlink" title="对比归并排序与快速排序"></a>对比归并排序与快速排序</h2><ol><li>都用了分治的思想。相比选择排序和冒泡排序，归并排序与快速排序使用了切分而不是直接遍历，这有效减少了交换次数。</li><li>归并排序是先切分、后排序，过程可以描述为：切分、切分、切分……排序、排序、排序……</li><li>快速排序是分区、排序交替进行，过程可以描述为：分区、排序、分区、排序……</li><li>上两条所说的“排序”，在归并排序与快速排序中并非同样的操作，归并排序中的操作是将两个数组合并为一（归并操作），而快速排序中的操作是交换。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="http://www.ituring.com.cn/book/2029" target="_blank" rel="noopener">学习JavaScript数据结构与算法（第2版）</a></li><li><a href="https://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank" rel="noopener">Sorting algorithm</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;归并排序与快速排序是两种有实际应用的排序算法，它们有一些共同的特点，整体思路上也比较相近。本文会从更简单的一些排序算法开始，过渡到归并排序和快速排序的实现，并对它们做一些简单的对比思考和总结。在这之前，先简单介绍一下排序算法的意义。&lt;/p&gt;
&lt;p&gt;排序算法就是将一串数据依照特定排序方式进行排列，它们在计算机科学中有大量研究以及应用。&lt;/p&gt;
&lt;p&gt;想象一下下列场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从通讯录中寻找某个联系人&lt;/li&gt;
&lt;li&gt;从一大堆文件中寻找某个文件&lt;/li&gt;
&lt;li&gt;到了影厅之后，寻找电影票上指定的座位&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果以上情况中，联系人、文件、影厅座位这些“数据”没有按照需要的顺序组织，如何找到想要的特定“数据”呢？会非常麻烦！所以说，对于需要搜索的数据，往往应该先排个序！&lt;/p&gt;
&lt;h2 id=&quot;热身一：选择排序&quot;&gt;&lt;a href=&quot;#热身一：选择排序&quot; class=&quot;headerlink&quot; title=&quot;热身一：选择排序&quot;&gt;&lt;/a&gt;热身一：选择排序&lt;/h2&gt;&lt;p&gt;本文的示例都是数值排序，对于这个问题，最简单直观的方法是：先找出最小的、再找出第二小的、接着找出第三小的……这就是选择排序的思路。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="算法" scheme="http://alphabao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://alphabao.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树的简明实现（ES5 &amp; ES6）</title>
    <link href="http://alphabao.github.io/2017/11/24/binary-search-tree-es5-es6-md/"/>
    <id>http://alphabao.github.io/2017/11/24/binary-search-tree-es5-es6-md/</id>
    <published>2017-11-24T11:57:48.000Z</published>
    <updated>2022-03-19T13:00:34.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树-amp-二叉搜索树"><a href="#二叉树-amp-二叉搜索树" class="headerlink" title="二叉树 &amp; 二叉搜索树"></a>二叉树 &amp; 二叉搜索树</h2><p>二叉树（Binary Tree）是 n（n &gt;&#x3D; 0）个节点的有限集合，集合为空集时，叫作空二叉树；不为空时，由根节点及左子树、右子树组成，左子树、右子树也都是二叉树。</p><p>从这个描述，可以看出树的结构与递归之间存在密切关系，这种密切关系在树的遍历时能够得到充分体现。</p><p>二叉搜索树（Binary Search Tree），又叫二叉查找树；也称为有序二叉树（Ordered Binary Tree），排序二叉树（Sorted Binary Tree）。</p><p>这是维基百科上归纳的一些二叉搜索树的性质：</p><ol><li>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</li><li>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li>没有键值相等的节点。</li></ol><p>本次实现中有点不一样的地方，右节点是大于或等于父节点的。不过对示例没有影响，而且很容易改成只能大于父节点。<a id="more"></a></p><h2 id="关于《学习JavaScript数据结构与算法（第2版）》"><a href="#关于《学习JavaScript数据结构与算法（第2版）》" class="headerlink" title="关于《学习JavaScript数据结构与算法（第2版）》"></a>关于《学习JavaScript数据结构与算法（第2版）》</h2><p>当年看过这本书的第一版，最近打算复习一下数据结构与算法，于是看了第二版。</p><p>这是难得的一本用 JavaScript 实现的数据结构与算法的书，它的讲解十分清晰，相对来说质量较高，但问题也有很多。应该说第一版的内容还是比较可靠的，第二版新增的内容可靠性就差了很多。总的来说，这是一本从非常浅显的层面讲解数据结构与算法的书，想获得比较全面的知识还是需要阅读更专业的资料。</p><p>本文的 ES5 实现参考了这本书，因为我觉得它是比较工整的实现，用于学习和理解时，好过我看到的其他一些实现方式。在原书示例代码的基础上，我做了一些小调整。本书第二版号称拥抱 ES6，但我看过之后发现至少树这一章没有改为 ES6 的实现，于是自己写了一遍，正好当作练习的机会。</p><p>另外，这本书中提到的树的遍历方式包括<strong>中序、先序、后序遍历</strong>，这些都属于<strong>深度优先遍历</strong>。在本文的代码中，我补充了<strong>广度优先遍历</strong>以及<strong>按照层次遍历二叉树</strong>的实现。</p><h2 id="Binary-Search-Tree-ES5"><a href="#Binary-Search-Tree-ES5" class="headerlink" title="Binary Search Tree - ES5"></a>Binary Search Tree - ES5</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BinarySearchTree = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newNode.key &lt; node.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insertNode(node.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> inOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      inOrderTraverseNode(node.left, cb);</span><br><span class="line">      cb(node.key);</span><br><span class="line">      inOrderTraverseNode(node.right, cb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      cb(node.key);</span><br><span class="line">      preOrderTraverseNode(node.left, cb);</span><br><span class="line">      preOrderTraverseNode(node.right, cb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> postOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">      postOrderTraverseNode(node.left, cb);</span><br><span class="line">      postOrderTraverseNode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> levelOrderTraverseNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> list = [node];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      node = list.shift();</span><br><span class="line">      cb(node.key);</span><br><span class="line">      <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">        list.push(node.left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">        list.push(node.right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> separateByLevelFn = <span class="function"><span class="keyword">function</span>(<span class="params">node, cb, separator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="keyword">var</span> END_FLAG = <span class="string">'END_FLAG'</span>;</span><br><span class="line"></span><br><span class="line">    list.push(node);</span><br><span class="line">    list.push(END_FLAG);</span><br><span class="line"></span><br><span class="line">    separator = separator || <span class="string">'---*---'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      node = list.shift();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遇到结束信号，表示已经遍历完一层；若队列中还有元素，说明它们是刚刚遍历完的这一层的所有子元素。</span></span><br><span class="line">      <span class="keyword">if</span> (node === END_FLAG &amp;&amp; list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        list.push(END_FLAG);</span><br><span class="line">        cb(separator);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb(node.key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">          list.push(node.left)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">          list.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (val &lt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.left, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; node.key) &#123;</span><br><span class="line">      <span class="keyword">return</span> searchNode(node.right, val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> findMinNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">while</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> removeNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      node.left = removeNode(node.left, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      node.right = removeNode(node.right, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> aux = findMinNode(node.right);</span><br><span class="line">      node.key = aux.key;</span><br><span class="line">      node.right = removeNode(node.right, aux.key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">      root = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      insertNode(root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历是一种以上行顺序访问BST所有节点的遍历方式，也就是以从最小到最大的顺序访</span></span><br><span class="line">  <span class="comment">// 问所有节点。中序遍历的一种应用就是对树进行排序操作。</span></span><br><span class="line">  <span class="keyword">this</span>.inOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    inOrderTraverseNode(root, cb);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先序遍历是以优先于后代节点的顺序访问每个节点的。先序遍历的一种应用是打印一个结构化的文档。</span></span><br><span class="line">  <span class="keyword">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    preOrderTraverseNode(root, cb);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后序遍历则是先访问节点的后代节点，再访问节点本身。后序遍历的一种应用是计算一个目</span></span><br><span class="line">  <span class="comment">// 录和它的子目录中所有文件所占空间的大小。</span></span><br><span class="line">  <span class="keyword">this</span>.postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    postOrderTraverseNode(root, cb);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Breadth-First-Search</span></span><br><span class="line">  <span class="comment">// 可以用来解决寻路径的问题。</span></span><br><span class="line">  <span class="keyword">this</span>.levelOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    levelOrderTraverseNode(root, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Breadth-First-Search</span></span><br><span class="line">  <span class="comment">// 区分层次</span></span><br><span class="line">  <span class="keyword">this</span>.separateByLevel = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    separateByLevelFn(root, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minNode(root);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.max = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> maxNode(root);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.search = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    searchNode(root, val);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    root = removeNode(root, key);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ========== test case ========== */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tree = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *               11</span></span><br><span class="line"><span class="comment"> *              /  \</span></span><br><span class="line"><span class="comment"> *             /    \</span></span><br><span class="line"><span class="comment"> *            /      \</span></span><br><span class="line"><span class="comment"> *           /        \</span></span><br><span class="line"><span class="comment"> *          /          \</span></span><br><span class="line"><span class="comment"> *         /            \</span></span><br><span class="line"><span class="comment"> *        7             15</span></span><br><span class="line"><span class="comment"> *       / \           /   \</span></span><br><span class="line"><span class="comment"> *      /   \         /     \</span></span><br><span class="line"><span class="comment"> *     5     9       13     20</span></span><br><span class="line"><span class="comment"> *    / \   / \     /  \   /  \</span></span><br><span class="line"><span class="comment"> *   3   6 8  10   12  14 18  25</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tree.insert(<span class="number">11</span>);</span><br><span class="line">tree.insert(<span class="number">7</span>);</span><br><span class="line">tree.insert(<span class="number">15</span>);</span><br><span class="line">tree.insert(<span class="number">5</span>);</span><br><span class="line">tree.insert(<span class="number">3</span>);</span><br><span class="line">tree.insert(<span class="number">9</span>);</span><br><span class="line">tree.insert(<span class="number">8</span>);</span><br><span class="line">tree.insert(<span class="number">10</span>);</span><br><span class="line">tree.insert(<span class="number">13</span>);</span><br><span class="line">tree.insert(<span class="number">12</span>);</span><br><span class="line">tree.insert(<span class="number">14</span>);</span><br><span class="line">tree.insert(<span class="number">20</span>);</span><br><span class="line">tree.insert(<span class="number">18</span>);</span><br><span class="line">tree.insert(<span class="number">25</span>);</span><br><span class="line">tree.insert(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> printNode = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tree.inOrderTraverse(printNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.levelOrderTraverse(printNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.separateByLevel(printNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.remove(<span class="number">7</span>)</span><br><span class="line">tree.inOrderTraverse(printNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.preOrderTraverse(printNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.postOrderTraverse(printNode);</span><br></pre></td></tr></table></figure><h2 id="Binary-Search-Tree-ES6"><a href="#Binary-Search-Tree-ES6" class="headerlink" title="Binary Search Tree - ES6"></a>Binary Search Tree - ES6</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(key) &#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert(key):向树中插入一个新的键。</span></span><br><span class="line"><span class="comment">// search(key):在树中查找一个键，如果节点存在，则返回true;如果不存在，则返回false。</span></span><br><span class="line"><span class="comment">// inOrderTraverse:通过中序遍历方式遍历所有节点。</span></span><br><span class="line"><span class="comment">// preOrderTraverse:通过先序遍历方式遍历所有节点。</span></span><br><span class="line"><span class="comment">// postOrderTraverse:通过后序遍历方式遍历所有节点。</span></span><br><span class="line"><span class="comment">// min:返回树中最小的值/键。</span></span><br><span class="line"><span class="comment">// max:返回树中最大的值/键。</span></span><br><span class="line"><span class="comment">// remove(key):从树中移除某个键。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> insertNode(node, newNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.key &gt; newNode.key) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.left = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        BinarySearchTree.insertNode(node.left, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node.right = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        BinarySearchTree.insertNode(node.right, newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> searchNode(node, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.key === key) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &gt; key) &#123;</span><br><span class="line">      BinarySearchTree.searchNode(node.left, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">      BinarySearchTree.searchNode(node.right, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> inOrderTraverseNode(node, cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    BinarySearchTree.inOrderTraverseNode(node.left, cb);</span><br><span class="line">    cb(node.key);</span><br><span class="line">    BinarySearchTree.inOrderTraverseNode(node.right, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> preOrderTraverseNode(node, cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cb(node.key);</span><br><span class="line">    BinarySearchTree.preOrderTraverseNode(node.left, cb);</span><br><span class="line">    BinarySearchTree.preOrderTraverseNode(node.right, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> postOrderTraverseNode(node, cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    BinarySearchTree.postOrderTraverseNode(node.left, cb);</span><br><span class="line">    BinarySearchTree.postOrderTraverseNode(node.right, cb);</span><br><span class="line">    cb(node.key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> levelOrderTraverseNode(node, cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> list = [node];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      node = list.shift();</span><br><span class="line">      cb(node.key);</span><br><span class="line">      <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">        list.push(node.left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">        list.push(node.right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> separateByLevelFn(node, cb, separator = <span class="string">'---*---'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> list = [];</span><br><span class="line">    <span class="keyword">const</span> END_FLAG = <span class="string">'END_FLAG'</span>;</span><br><span class="line"></span><br><span class="line">    list.push(node);</span><br><span class="line">    list.push(END_FLAG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      node = list.shift();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遇到结束信号，表示已经遍历完一层；若队列中还有元素，说明它们是刚刚遍历完的这一层的所有子元素。</span></span><br><span class="line">      <span class="keyword">if</span> (node === END_FLAG &amp;&amp; list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        list.push(END_FLAG);</span><br><span class="line">        cb(separator);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb(node.key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">          list.push(node.left)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">          list.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> removeNode(node, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.key === key) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right === <span class="literal">null</span>) &#123;</span><br><span class="line">        node = node.left;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left &amp;&amp; node.right) &#123;</span><br><span class="line">        <span class="keyword">let</span> rightMinNode = node.right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rightMinNode.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">          rightMinNode = rightMinNode.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.key = rightMinNode.key;</span><br><span class="line">        node.right = BinarySearchTree.removeNode(node.right, rightMinNode.key);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &gt; key) &#123;</span><br><span class="line">      node.left = BinarySearchTree.removeNode(node.left, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; key) &#123;</span><br><span class="line">      node.right = BinarySearchTree.removeNode(node.right, key);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> printNode(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  insert(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      BinarySearchTree.insertNode(<span class="keyword">this</span>.root, newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  search(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> BinarySearchTree.searchNode(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中序遍历是一种以上行顺序访问BST所有节点的遍历方式，也就是以从最小到最大的顺序访</span></span><br><span class="line">  <span class="comment">// 问所有节点。中序遍历的一种应用就是对树进行排序操作。</span></span><br><span class="line">  inOrderTraverse(cb = BinarySearchTree.printNode) &#123;</span><br><span class="line">    BinarySearchTree.inOrderTraverseNode(<span class="keyword">this</span>.root, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先序遍历是以优先于后代节点的顺序访问每个节点的。先序遍历的一种应用是打印一个结构化的文档。</span></span><br><span class="line">  preOrderTraverse(cb = BinarySearchTree.printNode) &#123;</span><br><span class="line">    BinarySearchTree.preOrderTraverseNode(<span class="keyword">this</span>.root, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后序遍历则是先访问节点的后代节点，再访问节点本身。后序遍历的一种应用是计算一个目</span></span><br><span class="line">  <span class="comment">// 录和它的子目录中所有文件所占空间的大小。</span></span><br><span class="line">  postOrderTraverse(cb = BinarySearchTree.printNode) &#123;</span><br><span class="line">    BinarySearchTree.postOrderTraverseNode(<span class="keyword">this</span>.root, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Breadth-First-Search</span></span><br><span class="line">  <span class="comment">// 可以用来解决寻路径的问题。</span></span><br><span class="line">  levelOrderTraverse(cb = BinarySearchTree.printNode) &#123;</span><br><span class="line">    BinarySearchTree.levelOrderTraverseNode(<span class="keyword">this</span>.root, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Breadth-First-Search</span></span><br><span class="line">  <span class="comment">// 区分层次</span></span><br><span class="line">  separateByLevel(cb = BinarySearchTree.printNode) &#123;</span><br><span class="line">    BinarySearchTree.separateByLevelFn(<span class="keyword">this</span>.root, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  min() &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.key;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  max() &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">      node = node.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.key();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove(key) &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = BinarySearchTree.removeNode(<span class="keyword">this</span>.root, key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ========== test case ========== */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tree = <span class="keyword">new</span> BinarySearchTree();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *               11</span></span><br><span class="line"><span class="comment"> *              /  \</span></span><br><span class="line"><span class="comment"> *             /    \</span></span><br><span class="line"><span class="comment"> *            /      \</span></span><br><span class="line"><span class="comment"> *           /        \</span></span><br><span class="line"><span class="comment"> *          /          \</span></span><br><span class="line"><span class="comment"> *         /            \</span></span><br><span class="line"><span class="comment"> *        7             15</span></span><br><span class="line"><span class="comment"> *       / \           /   \</span></span><br><span class="line"><span class="comment"> *      /   \         /     \</span></span><br><span class="line"><span class="comment"> *     5     9       13     20</span></span><br><span class="line"><span class="comment"> *    / \   / \     /  \   /  \</span></span><br><span class="line"><span class="comment"> *   3   6 8  10   12  14 18  25</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">tree.insert(<span class="number">11</span>);</span><br><span class="line">tree.insert(<span class="number">7</span>);</span><br><span class="line">tree.insert(<span class="number">15</span>);</span><br><span class="line">tree.insert(<span class="number">5</span>);</span><br><span class="line">tree.insert(<span class="number">3</span>);</span><br><span class="line">tree.insert(<span class="number">9</span>);</span><br><span class="line">tree.insert(<span class="number">8</span>);</span><br><span class="line">tree.insert(<span class="number">10</span>);</span><br><span class="line">tree.insert(<span class="number">13</span>);</span><br><span class="line">tree.insert(<span class="number">12</span>);</span><br><span class="line">tree.insert(<span class="number">14</span>);</span><br><span class="line">tree.insert(<span class="number">20</span>);</span><br><span class="line">tree.insert(<span class="number">18</span>);</span><br><span class="line">tree.insert(<span class="number">25</span>);</span><br><span class="line">tree.insert(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">tree.inOrderTraverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.levelOrderTraverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.separateByLevel();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.remove(<span class="number">7</span>)</span><br><span class="line">tree.inOrderTraverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.preOrderTraverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'\n'</span>)</span><br><span class="line">tree.postOrderTraverse();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉树-amp-二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉树-amp-二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉树 &amp;amp; 二叉搜索树&quot;&gt;&lt;/a&gt;二叉树 &amp;amp; 二叉搜索树&lt;/h2&gt;&lt;p&gt;二叉树（Binary Tree）是 n（n &amp;gt;&amp;#x3D; 0）个节点的有限集合，集合为空集时，叫作空二叉树；不为空时，由根节点及左子树、右子树组成，左子树、右子树也都是二叉树。&lt;/p&gt;
&lt;p&gt;从这个描述，可以看出树的结构与递归之间存在密切关系，这种密切关系在树的遍历时能够得到充分体现。&lt;/p&gt;
&lt;p&gt;二叉搜索树（Binary Search Tree），又叫二叉查找树；也称为有序二叉树（Ordered Binary Tree），排序二叉树（Sorted Binary Tree）。&lt;/p&gt;
&lt;p&gt;这是维基百科上归纳的一些二叉搜索树的性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；&lt;/li&gt;
&lt;li&gt;若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；&lt;/li&gt;
&lt;li&gt;任意节点的左、右子树也分别为二叉查找树；&lt;/li&gt;
&lt;li&gt;没有键值相等的节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本次实现中有点不一样的地方，右节点是大于或等于父节点的。不过对示例没有影响，而且很容易改成只能大于父节点。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="数据结构" scheme="http://alphabao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://alphabao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BST" scheme="http://alphabao.github.io/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>想象一双结实而富有弹性的大腿：理解 Flexbox 布局</title>
    <link href="http://alphabao.github.io/2017/11/19/understanding-css-flexbox/"/>
    <id>http://alphabao.github.io/2017/11/19/understanding-css-flexbox/</id>
    <published>2017-11-19T08:07:59.000Z</published>
    <updated>2022-03-19T13:00:34.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flexbox-让人困惑"><a href="#Flexbox-让人困惑" class="headerlink" title="Flexbox 让人困惑"></a>Flexbox 让人困惑</h2><p>有很多谈及 Flexbox 的文章，但依然有不少前端对此感到困惑。一方面，flex 相关的 CSS 属性繁多，影响到的具体效果也包含多个方面；另一方面，CSS 可以使用 <strong>Shorthand properties</strong> 风格的写法（例如最常见的 <code>background: url(images/bg.gif) no-repeat left top;</code>），很容易让新手弄不清具体含义。</p><p>这篇文章要讲的 Flexbox 当然还是 CSS3 规范中的弹性盒模型，不过写出前面一段，是因为我希望这篇文章可以解决那些问题——简单说，就是 Flexbox 让人困惑这样的问题。解决的方法，就是<strong>理解它</strong>。<a id="more"></a></p><h2 id="什么时候，我们会想到弹性"><a href="#什么时候，我们会想到弹性" class="headerlink" title="什么时候，我们会想到弹性"></a>什么时候，我们会想到弹性</h2><p>为了理解弹性盒模型，先要从古龙的笔法开始。古龙是台湾的武侠小说大师，成就仅次于金庸。古龙描写的一些人物，非常深入人心，其犀利以及令人难忘的程度，甚至超过金庸。比如，有一位中年男性，在整部小说里，他的手非常重要，古龙对此有多次描写——“他的手指修长而有力”。而在不止一本书中，不止一两个情节中，有几位青年女性，她们的腿非常重要，古龙的描述是——“大腿结实而富有弹性”，或者“修长结实而富有弹性”。</p><p>轻呼一口气，思考一下，为什么描写手指的时候要说“修长而有力”，而描写大腿却是“结实而富有弹性”？这真是一个非常值得思考的问题。实际上，人的腿也可以是“修长而有力”的；而且，人的手指也是有弹性的。但古大师的描写绝非随意为之，其中的道理，可以随便找些<strong>包含大腿的</strong>人物画看一看，或者只是想象一下——一幅人物画中，手指的面积有多大？除非为了强调手部而加了特技，否则手指所占的面积是很小的；而大腿，在一幅正常的人物画中，是充满空间的。这里说的充满，当然并不是指完全占满空间，也不是上下左右一定没有空隙。</p><p>记住这种“充满”，现在思考一下 Flexbox。什么时候，我们会想到或者说需要弹性这件事情？答案是当我们需要“充满”一个容器的时候。带着这种思考，再回到人物画。手指只是在画面的特定位置，解决这种问题，我们可以简单地用 <code>position: absolute;</code> 或 <code>float: left;</code> 这些属性搞定。而大腿是“充满”画面的，当我们需要“充满”容器的时候，<strong>弹性</strong>就很重要！要解决这类问题，我们应该思考的就不是某个局部的空间，而是空间的分配。包括如何分配容器内的所有盒子，如果空间过大怎么办，如果空间过小怎么办；而在移动端，设备的屏幕尺寸有很多种，问题就变成了空间有时候大、有时候小怎么办。</p><p>读者应该已经能够想到，弹性盒模型就是为了更方便地解决这些问题而产生的。那么先看一看<strong>非弹性</strong>的盒子遇到这些场景会有哪些不便。</p><h2 id="百分比网格"><a href="#百分比网格" class="headerlink" title="百分比网格"></a>百分比网格</h2><p data-height="265" data-theme-id="0" data-slug-hash="rYpJMx" data-default-tab="css,result" data-user="AlphaBao" data-embed-version="2" data-pen-title="understanding-css-flexbox 1: percentage" class="codepen">See the Pen <a href="https://codepen.io/AlphaBao/pen/rYpJMx/" target="_blank" rel="noopener">understanding-css-flexbox 1: percentage</a> by Alpha Bao (<a href="https://codepen.io/AlphaBao" target="_blank" rel="noopener">@AlphaBao</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>上面是用浮动和百分比的方式写的横向网格，由于直接给其中一个设置了不同的高度，很明显，可以看出，四个格子的高度是不同的。如果格子的高度变化是由其中的内容引起，也会存在同样的问题。</p><p>另外，示例之中是四个格子，所以设置每个格子为 <code>width: 25%;</code> 就可以让它们横向充满父级容器，而且大小变化也没有影响。但如果需要渲染的数据是动态的，写成具体某个百分比显然就不行了。即元素个数变化时每个元素的百分比也需要变化，就需要修改 CSS。</p><p>这些问题都是因为这样的盒模型是没有“弹性”的，如果有弹性，就可以让布局按照我们希望的方式渲染。</p><h2 id="Flex-网格"><a href="#Flex-网格" class="headerlink" title="Flex 网格"></a>Flex 网格</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹性盒模型带来了 Flexbox 布局，像上面这样，给充当 container 的盒子设置 <code>display: flex;</code> 就可以让它的子元素弹性排列，默认是横向的，因为 <code>flex-direction: row;</code> 是默认值，我们先不关心它。先看一下最常用的属性 <code>flex-grow</code>。</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p data-height="265" data-theme-id="0" data-slug-hash="pdpKOj" data-default-tab="css,result" data-user="AlphaBao" data-embed-version="2" data-pen-title="understanding-css-flexbox 2: flex-grow" class="codepen">See the Pen <a href="https://codepen.io/AlphaBao/pen/pdpKOj/" target="_blank" rel="noopener">understanding-css-flexbox 2: flex-grow</a> by Alpha Bao (<a href="https://codepen.io/AlphaBao" target="_blank" rel="noopener">@AlphaBao</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>可以看到其中一个是 <code>flex-grow: 2;</code>，其他都是 1，意思是这些子元素将充满容器，它们将容器分成了若干份，每个 <code>flex-grow: 1;</code> 元素占据一份，<code>flex-grow: 2;</code> 的占两份，因为它的 <code>flex-grow</code> 值是其他元素的两倍。也就是说，<code>flex-grow</code> 决定子元素如何膨胀。在 Flexbox 的充满／填充策略中，<code>flex-grow</code> 影响的是元素膨胀到多大。注意这其实是如何分配父级容器空间的问题，而且是容器大小会改变的情形下，所以具体子元素的大小是取决于空间剩余情况的，并不是 <code>flex-grow</code> 越大，元素就一定会越大。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p>再看 <code>flex-basis</code> 属性，它是指元素的初始大小，上一个例子中，只设置了 <code>flex-grow</code>，所以初始大小就是元素内容决定的，如果元素没有内容，大小就是零。</p><p data-height="265" data-theme-id="0" data-slug-hash="ZavjGK" data-default-tab="css,result" data-user="AlphaBao" data-embed-version="2" data-pen-title="understanding-css-flexbox 3: flex-basis" class="codepen">See the Pen <a href="https://codepen.io/AlphaBao/pen/ZavjGK/" target="_blank" rel="noopener">understanding-css-flexbox 3: flex-basis</a> by Alpha Bao (<a href="https://codepen.io/AlphaBao" target="_blank" rel="noopener">@AlphaBao</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p><code>flex-basis</code> 的默认值是 <code>auto</code>，是指元素的大小（本文中指的是元素横向的长度，因为 <code>flex-direction</code> 默认值是 <code>row</code>，这决定了 main axis（主轴）是横向的，即容器的子元素横向排列）根据元素的长度属性或者由内容决定。可以是具体长度值也可以是百分比。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15em</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时初始宽度是 <code>15em</code>，也可以写为下面这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.c3</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">15em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种写法效果相同。</p><p>计算完初始大小，再根据容器空间剩余情况，继续完成“充满”容器这件事情。如果先只考虑空间还有剩余的情况，前面提到的 <code>flex-grow</code> 属性就开始起作用，使元素膨胀，直到充满容器。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>前面考虑的都是空间还有剩余的情况，接下来考虑一下空间不足的情况。首先要弄清楚，具体怎样会导致空间不足。</p><p data-height="265" data-theme-id="0" data-slug-hash="OOzwQM" data-default-tab="css,result" data-user="AlphaBao" data-embed-version="2" data-pen-title="understanding-css-flexbox 4: flex-shrink" class="codepen">See the Pen <a href="https://codepen.io/AlphaBao/pen/OOzwQM/" target="_blank" rel="noopener">understanding-css-flexbox 4: flex-shrink</a> by Alpha Bao (<a href="https://codepen.io/AlphaBao" target="_blank" rel="noopener">@AlphaBao</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>可以看到，通过设置宽度或者由内容填充，此时可能导致空间不足。此时 <code>flex-shrink</code> 会起作用。首先计算初始大小，再考虑空间不足的情况，这时候根据 <code>flex-shrink</code> 的值决定如何收缩各个元素，数值越大，相对其他元素的收缩倍数就越大。<code>flex-shrink</code> 默认值是 <code>1</code>，即不改变这个属性值的情况下，空间不足时每个元素的收缩程度相同。如果改为 <code>0</code>，则不收缩。</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex 是上面三者的简写形式（这类写法的属性就是 Shorthand properties）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p data-height="265" data-theme-id="0" data-slug-hash="MOrBZV" data-default-tab="css,result" data-user="AlphaBao" data-embed-version="2" data-pen-title="understanding-css-flexbox 5: flex" class="codepen">See the Pen <a href="https://codepen.io/AlphaBao/pen/MOrBZV/" target="_blank" rel="noopener">understanding-css-flexbox 5: flex</a> by Alpha Bao (<a href="https://codepen.io/AlphaBao" target="_blank" rel="noopener">@AlphaBao</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>上面的每个子元素都设置了 <code>flex: 1 1 100px;</code>，即初始宽度值是 100px，如果空间剩余，每个元素平均分配，如果空间不足，每个元素同等程度的收缩。<code>flex: 0 1 auto;</code> 是 <code>flex</code> 属性的默认值，表示不膨胀（如果都不膨胀，那么有剩余空间也不会充满），收缩因数是 <code>1</code>，元素在主轴方向上的长度取决于长度值或者元素内容。</p><p>通过上面几个例子，可以看得出在大小会动态变化的父级容器里面，这种分配空间的策略优势很明显，这就是弹性带来的便利。<code>flex</code> 是实际开发中常用的写法，它的内容其实就是如何“充满”容器空间的策略，是 Flexbox 中最重要的部分。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>本文只谈及了 <code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code>，关于 Flexbox，还有很多内容。比如决定缠绕方式的 <code>flex-wrap</code>，它的效果类似 <code>float</code>，还有 <code>justify-content</code>，它决定元素在 main axis（主轴）方向的对齐方式，<code>align-self</code> 则决定 cross axis（垂直的交叉轴）方向（在例如主轴是水平方向，而各个元素具有不同的高度这类情况下起作用）。属性名有点乱，不过它们都是围绕<strong>充满</strong>和<strong>弹性</strong>扩展开的。只要结合对“充满”空间这件事情的想象，理解了<strong>弹性</strong>的含义，就弄清了目标与方法，应该能比较容易地学会并运用 Flexbox 了。</p><p>如上所见，本文所谈的，并不是大腿这件事情，如果你想看“真正的”大腿，可以读一读古龙的《多情剑客无情剑》、《午夜兰花》、《长生剑》以及《萧十一郎》。</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ol><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">A Complete Guide to Flexbox</a></li><li><a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties" target="_blank" rel="noopener">A Visual Guide to CSS3 Flexbox Properties</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flexbox-让人困惑&quot;&gt;&lt;a href=&quot;#Flexbox-让人困惑&quot; class=&quot;headerlink&quot; title=&quot;Flexbox 让人困惑&quot;&gt;&lt;/a&gt;Flexbox 让人困惑&lt;/h2&gt;&lt;p&gt;有很多谈及 Flexbox 的文章，但依然有不少前端对此感到困惑。一方面，flex 相关的 CSS 属性繁多，影响到的具体效果也包含多个方面；另一方面，CSS 可以使用 &lt;strong&gt;Shorthand properties&lt;/strong&gt; 风格的写法（例如最常见的 &lt;code&gt;background: url(images/bg.gif) no-repeat left top;&lt;/code&gt;），很容易让新手弄不清具体含义。&lt;/p&gt;
&lt;p&gt;这篇文章要讲的 Flexbox 当然还是 CSS3 规范中的弹性盒模型，不过写出前面一段，是因为我希望这篇文章可以解决那些问题——简单说，就是 Flexbox 让人困惑这样的问题。解决的方法，就是&lt;strong&gt;理解它&lt;/strong&gt;。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="CSS" scheme="http://alphabao.github.io/tags/CSS/"/>
    
      <category term="Flexbox" scheme="http://alphabao.github.io/tags/Flexbox/"/>
    
  </entry>
  
  <entry>
    <title>从上下文，到作用域（彩蛋：理解闭包）</title>
    <link href="http://alphabao.github.io/2017/10/14/context-and-scope-bonus-scene-closure/"/>
    <id>http://alphabao.github.io/2017/10/14/context-and-scope-bonus-scene-closure/</id>
    <published>2017-10-14T09:51:02.000Z</published>
    <updated>2022-03-19T13:00:34.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近几天在编程群中的聊天，让我发现了很多人并不清楚什么是上下文（context）、什么是作用域（scope），而且纠结在其中。我当初对这两个概念也只有粗浅的理解，不过我从一开始就不怎么困惑，因为我清楚自己对这一问题的认识边界。现在，我对它们的认识也只加深了一点点。不过，群聊中小伙伴的热情鼓舞了我——很多最最初学的小伙伴，想到和思考的是很多我从没考虑过的问题，小伙伴们真是达到了“进一寸有一寸的欢喜”这一境界。见贤思齐，我决定把这一点点进步记录下来。</p><h2 id="上下文与作用域的关系"><a href="#上下文与作用域的关系" class="headerlink" title="上下文与作用域的关系"></a>上下文与作用域的关系</h2><p>很多人弄不清除，原因当然是既不了解上下文，也不了解作用域——我是说，几乎没有人明白上下文是什么而不明白作用域是什么，反之亦然。<code>上下文（context）</code>和<code>作用域（scope）</code>都是编译原理的知识，具体编程语言有具体的实现规则，本文关注 JavaScript 语言的实现。首先需要关注的是，这两个概念的关系非常密切，所以先了解它们的关系，有助于理解它们到底是什么。</p><p><code>上下文（context）</code>和<code>作用域（scope）</code>的关系：</p><p><strong>上下文是一段程序运行所需要的最小数据集合；作用域是当前上下文中，按照具体规则能够访问到的标识符（变量）的范围。</strong></p><p>后文是对上下文和作用域更详细的解释，知道了上面指出的关系，往下阅读时就可以加深对这一关系的理解了。<a id="more"></a></p><h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><p><strong>上下文（context）</strong>是一段程序运行所需要的最小数据集合。我们可以从<strong>上下文交换（context switch）</strong>来理解上下文，在多进程或多线程环境中，任务切换时首先要中断当前的任务，将计算资源交给下一个任务。因为稍后还要恢复之前的任务，所以中断的时候要<strong>保存现场</strong>，即当前任务的上下文，也可以叫做环境。即上下文就是恢复现场所需的最小数据集合。容易把人弄晕的一点是，我们这里说的<strong>上下文</strong>、<strong>环境</strong>有时候也称作<strong>作用域（scope）</strong>，即这两个概念有时候是混用的。不过，它们有不同的侧重点，下一节将会说明。</p><p>另外，JavaScript 中常见的情形是一个方法&#x2F;函数的执行。从一段程序的角度看，这段程序运行所需的所有变量，就是它的上下文。</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><strong>作用域（scope）</strong>是标识符（变量）在程序中的可见性范围。<strong>作用域规则</strong>是按照具体规则维护标识符的可见性，以确定当前执行的代码对这些标识符的访问权限。作用域（scope）是在具体的作用域规则之下确定的。</p><p>前面说过，有时候上下文、环境、作用域是同义词；不过，上下文（context）指代的是整体环境，作用域关注的是标识符（变量）的可访问性（可见性）。上下文确定了，根据具体编程语言的作用域规则，作用域也就确定了。这就是上下文与作用域的<strong>关系</strong>。</p><p>写 JavaScript 代码时，如果 Function 作为参数，可以指定它在具体对象上调用时，这个对象常常叫做 context：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callWithContext</span>(<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fn.call(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apple = &#123;</span><br><span class="line">  name: <span class="string">"Apple"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orange = &#123;</span><br><span class="line">  name: <span class="string">"Orange"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">callWithContext(echo, apple);  <span class="comment">// Apple</span></span><br><span class="line">callWithContext(echo, orange); <span class="comment">// Orange</span></span><br></pre></td></tr></table></figure><p>为什么将这个参数叫做 context？因为它关系到调用环境，指定了它，就指定了函数的调用上下文。再加上具体的作用域规则，作用域也确定了。</p><p>在 JavaScript 中，这个具体的作用域规则就是<strong>词法作用域（lexical scope）</strong>，也就是 JavaScript 中的作用域链的规则。词法作用域是的变量在编译时（词法阶段）就是确定的，所以词法作用域又叫<strong>静态作用域（static scope）</strong>，与之相对的是<strong>动态作用域（dynamic scope）</strong>。</p><p><em>You Don’t Know JS: Scope &amp; Closures</em> 用简单例子解释过动态作用域，下面用一个类似的例子说明一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>有一定 JavaScript 编程经验的人都能看出，这段程序会输出 2，但如果在动态作用域的规则下，应该输出 3，即 a 的引用不再是编译时确定，而是调用时确定的。这有点像 JavaScript 中的 <code>this</code>，所以 MDN 中，function.bind 的方法签名中第一个形参名称用的是 <code>thisArg</code> 这一更<strong>科学</strong>的名字：</p><p><code>fun.bind(thisArg[, arg1[, arg2[, ...]]])</code></p><p>同样情况的还可见于 Lodash 的文档：</p><p><code>_.bind(func, thisArg, [partials])</code></p><h2 id="彩蛋：理解闭包"><a href="#彩蛋：理解闭包" class="headerlink" title="彩蛋：理解闭包"></a>彩蛋：理解闭包</h2><p>上一节中的代码中，之所以输出 2，是因为 foo 是一个闭包函数。如果从本文中理解了上下文和作用域的概念，对于<strong>闭包是什么</strong>这一问题是不是感到豁然开朗？</p><p>前面说过，词法作用域也叫静态作用域，变量在词法阶段确定，也就是定义时确定。虽然在 bar 内调用，但由于 foo 是闭包函数，即使它在自己定义的词法作用域以外的地方执行，它也一直保持着自己的作用域。所谓闭包函数，即这个函数封闭了它自己的定义时的环境，形成了一个<a href="/2013/06/16/how-to-explain-closure/">闭包</a>，所以 foo 并不会从 bar 中寻找变量，这就是静态作用域的特点。</p><p>一个更加典型的例子是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> sub = fn();</span><br><span class="line"></span><br><span class="line">sub(); <span class="comment">// 0;</span></span><br></pre></td></tr></table></figure><p>sub 就是 func 这一返回值，func 定义在 fn 内部并且被传递出来了，所以 fn 执行之后垃圾回收器依然没有回收它的内部作用域，因为 func&#x2F;sub 在使用。sub 依然持有 func 定义时的作用域的引用，而这个引用就叫作闭包。调用 sub 时，它可以访问 func 定义时的词法作用域，因此找到的 a 是 fn 内部的变量 a，它的值是 0。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch2.md" target="_blank" rel="noopener">You Don’t Know JS: Scope &amp; Closures</a><br><a href="https://en.wikipedia.org/wiki/Context_%28computing%29" target="_blank" rel="noopener">Context (computing)</a><br><a href="https://en.wikipedia.org/wiki/Scope_%28computer_science%29" target="_blank" rel="noopener">Scope (computer science)</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">Function.prototype.bind()</a><br><a href="https://lodash.com/docs/4.17.4#bind" target="_blank" rel="noopener">Function _.bind()</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近几天在编程群中的聊天，让我发现了很多人并不清楚什么是上下文（context）、什么是作用域（scope），而且纠结在其中。我当初对这两个概念也只有粗浅的理解，不过我从一开始就不怎么困惑，因为我清楚自己对这一问题的认识边界。现在，我对它们的认识也只加深了一点点。不过，群聊中小伙伴的热情鼓舞了我——很多最最初学的小伙伴，想到和思考的是很多我从没考虑过的问题，小伙伴们真是达到了“进一寸有一寸的欢喜”这一境界。见贤思齐，我决定把这一点点进步记录下来。&lt;/p&gt;
&lt;h2 id=&quot;上下文与作用域的关系&quot;&gt;&lt;a href=&quot;#上下文与作用域的关系&quot; class=&quot;headerlink&quot; title=&quot;上下文与作用域的关系&quot;&gt;&lt;/a&gt;上下文与作用域的关系&lt;/h2&gt;&lt;p&gt;很多人弄不清除，原因当然是既不了解上下文，也不了解作用域——我是说，几乎没有人明白上下文是什么而不明白作用域是什么，反之亦然。&lt;code&gt;上下文（context）&lt;/code&gt;和&lt;code&gt;作用域（scope）&lt;/code&gt;都是编译原理的知识，具体编程语言有具体的实现规则，本文关注 JavaScript 语言的实现。首先需要关注的是，这两个概念的关系非常密切，所以先了解它们的关系，有助于理解它们到底是什么。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;上下文（context）&lt;/code&gt;和&lt;code&gt;作用域（scope）&lt;/code&gt;的关系：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上下文是一段程序运行所需要的最小数据集合；作用域是当前上下文中，按照具体规则能够访问到的标识符（变量）的范围。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后文是对上下文和作用域更详细的解释，知道了上面指出的关系，往下阅读时就可以加深对这一关系的理解了。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="context" scheme="http://alphabao.github.io/tags/context/"/>
    
      <category term="scope" scheme="http://alphabao.github.io/tags/scope/"/>
    
      <category term="closure" scheme="http://alphabao.github.io/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的渲染：过程与原理</title>
    <link href="http://alphabao.github.io/2017/09/17/browser-rendering-processes-and-principles/"/>
    <id>http://alphabao.github.io/2017/09/17/browser-rendering-processes-and-principles/</id>
    <published>2017-09-17T08:17:55.000Z</published>
    <updated>2022-03-19T13:00:34.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容说明"><a href="#内容说明" class="headerlink" title="内容说明"></a>内容说明</h2><p>本文不是关于浏览器渲染的底层原理或前端优化具体细节的讲解，而是关于浏览器对页面的渲染——这一过程的描述及其背后原理的解释。这是因为前端优化是一个非常庞大且零散的知识集合，一篇文章如果要写优化的具体方法恐怕只能做一些有限的列举。</p><p>然而，如果了解清楚浏览器的渲染过程、渲染原理，其实就掌握了指导原则。根据优化原则，可以实现出无数种具体的优化方案，各种预编译、预加载、资源合并、按需加载方案都是针对浏览器渲染习惯的优化。</p><h2 id="关键渲染路径"><a href="#关键渲染路径" class="headerlink" title="关键渲染路径"></a>关键渲染路径</h2><p>提到页面渲染，有几个相关度非常高的概念，最重要的是关键渲染路径，其他几个概念都可以从它展开，下面稍作说明。</p><p><strong>关键渲染路径（Critical Rendering Path）</strong>是指与当前用户操作有关的内容。例如用户刚刚打开一个页面，首屏的显示就是当前用户操作相关的内容，具体就是浏览器收到 HTML、CSS 和 JavaScript 等资源并对其进行处理从而渲染出 Web 页面。</p><p>了解浏览器渲染的过程与原理，很大程度上是为了<strong>优化关键渲染路径</strong>，但优化应该是针对具体问题的解决方案，所以优化没有一定之规。<a id="more"></a>例如为了保障<strong>首屏内容</strong>的最快速显示，通常会提到<strong>渐进式页面渲染</strong>，但是为了渐进式页面渲染，就需要做资源的拆分，那么以什么粒度拆分、要不要拆分，不同页面、不同场景策略不同。具体方案的确定既要考虑体验问题，也要考虑工程问题。</p><h2 id="浏览器渲染页面的过程"><a href="#浏览器渲染页面的过程" class="headerlink" title="浏览器渲染页面的过程"></a>浏览器渲染页面的过程</h2><p>从耗时的角度，浏览器请求、加载、渲染一个页面，时间花在下面<a href="https://developers.google.com/speed/docs/insights/mobile" target="_blank" rel="noopener">五件事情</a>上：</p><ol><li>DNS 查询</li><li>TCP 连接</li><li>HTTP 请求即响应</li><li>服务器响应</li><li>客户端渲染</li></ol><p>本文讨论第五个部分，即浏览器对内容的渲染，这一部分（渲染树构建、布局及绘制），又可以分为下面<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction" target="_blank" rel="noopener">五个步骤</a>：</p><ol><li>处理 HTML 标记并构建 DOM 树。</li><li>处理 CSS 标记并构建 CSSOM 树。</li><li>将 DOM 与 CSSOM 合并成一个渲染树。</li><li>根据渲染树来布局，以计算每个节点的几何信息。</li><li>将各个节点绘制到屏幕上。</li></ol><p>需要明白，这五个步骤并不一定一次性顺序完成。如果 DOM 或 CSSOM 被修改，以上过程需要重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。实际页面中，CSS 与 JavaScript 往往会多次修改 DOM 和 CSSOM，下面就来看看它们的影响方式。</p><h2 id="阻塞渲染：CSS-与-JavaScript"><a href="#阻塞渲染：CSS-与-JavaScript" class="headerlink" title="阻塞渲染：CSS 与 JavaScript"></a>阻塞渲染：CSS 与 JavaScript</h2><p>谈论资源的阻塞时，我们要清楚，现代浏览器总是并行加载资源。例如，当 HTML 解析器（HTML Parser）被脚本阻塞时，解析器虽然会停止构建 DOM，但仍会识别该脚本后面的资源，并进行预加载。</p><p>同时，由于下面两点：</p><ol><li>默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。</li><li>JavaScript 不仅可以读取和修改 DOM 属性，还可以读取和修改 CSSOM 属性。</li></ol><p>存在阻塞的 CSS 资源时，浏览器会延迟 JavaScript 的执行和 DOM 构建。另外：</p><ol><li>当浏览器遇到一个 script 标记时，DOM 构建将暂停，直至脚本完成执行。</li><li>JavaScript 可以查询和修改 DOM 与 CSSOM。</li><li>CSSOM 构建时，JavaScript 执行将暂停，直至 CSSOM 就绪。</li></ol><p>所以，script 标签的位置很重要。实际使用时，可以遵循下面两个原则：</p><ol><li>CSS 优先：引入顺序上，CSS 资源先于 JavaScript 资源。</li><li>JavaScript 应尽量少影响 DOM 的构建。</li></ol><p>浏览器的发展日益加快（目前的 Chrome 官方稳定版是 61），具体的渲染策略会不断进化，但了解这些原理后，就能想通它进化的逻辑。下面来看看 CSS 与 JavaScript 具体会怎样阻塞资源。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"index.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的 link 标签（无论是否 inline）会被视为阻塞渲染的资源，浏览器会优先处理这些 CSS 资源，直至 CSSOM 构建完毕。</p><p>渲染树（Render-Tree）的关键渲染路径中，要求同时具有 DOM 和 CSSOM，之后才会构建渲染树。即，HTML 和 CSS 都是阻塞渲染的资源。HTML 显然是必需的，因为包括我们希望显示的文本在内的内容，都在 DOM 中存放，那么可以从 CSS 上想办法。</p><p>最容易想到的当然是<strong>精简 CSS 并尽快提供它</strong>。除此之外，还可以用媒体类型（media type）和媒体查询（media query）来解除对渲染的阻塞。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"index.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"print.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"other.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"(min-width: 30em) and (orientation: landscape)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一个资源会加载并阻塞。<br>第二个资源设置了媒体类型，会加载但不会阻塞，print 声明只在打印网页时使用。<br>第三个资源提供了媒体查询，会在符合条件时阻塞渲染。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript 的情况比 CSS 要更复杂一些。观察下面的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Do not go gentle into that good night,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"inline"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Old age should burn and rave at close of day;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Rage, rage against the dying of the light.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Do not go gentle into that good night,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Old age should burn and rave at close of day;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"inline"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Rage, rage against the dying of the light.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的 script 标签会阻塞 HTML 解析，无论是不是 inline-script。上面的 P 标签会从上到下解析，这个过程会被两段 JavaScript 分别打断一次（加载并且执行的时间段内）。</p><p>所以实际工程中，我们常常将资源放到文档底部。</p><h3 id="改变阻塞模式：defer-与-async"><a href="#改变阻塞模式：defer-与-async" class="headerlink" title="改变阻塞模式：defer 与 async"></a>改变阻塞模式：defer 与 async</h3><p>为什么要将 script 加载的 defer 与 async 方式放到后面呢？因为这两种方式是的出现，全是由于前面讲的那些阻塞条件的存在。换句话说，defer 与 async 方式可以改变之前的那些阻塞情形。</p><p>首先，注意 async 与 defer 属性对于 inline-script 都是无效的，所以下面这个示例中三个 script 标签的代码会从上到下依次执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按照从上到下的顺序输出 1 2 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"2"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"3"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>故，下面两节讨论的内容都是针对设置了 src 属性的 script 标签。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app1.js"</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app2.js"</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app3.js"</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>defer 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。整个 document 解析完毕且 defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的 JavaScript 代码，然后触发 DOMContentLoaded 事件。</p><p>defer 不会改变 script 中代码的执行顺序，示例代码会按照 1、2、3 的顺序执行。所以，defer 与相比普通 script，有两点区别：载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"app.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"ad.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"statistics.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>async 属性表示异步执行引入的 JavaScript，与 defer 的区别在于，如果已经加载好，就会开始执行——无论此刻是 HTML 解析阶段还是 DOMContentLoaded 触发之后。需要注意的是，这种方式加载的 JavaScript 依然会阻塞 load 事件。换句话说，async-script 可能在 DOMContentLoaded 触发之前或之后执行，但一定在 load 触发之前执行。</p><p>从上一段也能推出，多个 async-script 的执行顺序是不确定的。值得注意的是，向 document 动态添加 script 标签时，async 属性默认是 true，下一节会继续这个话题。</p><h2 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement"></a>document.createElement</h2><p>使用 document.createElement 创建的 script 默认是异步的，示例如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.createElement(<span class="string">"script"</span>).async); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>所以，通过动态添加 script 标签引入 JavaScript 文件默认是不会阻塞页面的。如果想同步执行，需要将 async 属性人为设置为 false。</p><p>如果使用 document.createElement 创建 link 标签会怎样呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> style = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">style.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line">style.href = <span class="string">"index.css"</span>;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(style); <span class="comment">// 阻塞？</span></span><br></pre></td></tr></table></figure><p>其实这只能通过试验确定，已知的是，Chrome 中已经<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=571725" target="_blank" rel="noopener">不会阻塞渲染</a>，Firefox、IE 在以前是阻塞的，现在会怎样我没有试验。</p><h2 id="document-write-与-innerHTML"><a href="#document-write-与-innerHTML" class="headerlink" title="document.write 与 innerHTML"></a>document.write 与 innerHTML</h2><p>通过 document.write 添加的 link 或 script 标签都相当于添加在 document 中的标签，因为它操作的是 document stream（所以对于 loaded 状态的页面使用 document.write 会自动调用 document.open，这会覆盖原有文档内容）。即正常情况下， link 会阻塞渲染，script 会同步执行。不过这是不推荐的方式，Chrome 已经会显示警告，提示未来有可能禁止这样引入。如果给这种方式引入的 script 添加 async 属性，Chrome 会检查是否同源，对于非同源的 async-script 是不允许这么引入的。</p><p>如果使用 innerHTML 引入 script 标签，其中的 JavaScript 不会执行。当然，可以通过 eval() 来手工处理，不过不推荐。如果引入 link 标签，我试验过在 Chrome 中是可以起作用的。另外，outerHTML、insertAdjacentHTML() 应该也是相同的行为，我并没有试验。这三者应该用于文本的操作，即只使用它们添加 text 或普通 HTML Element。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developers.google.com/speed/docs/insights/mobile" target="_blank" rel="noopener">Mobile Analysis in PageSpeed Insights</a><br><a href="https://developers.google.com/web/fundamentals/" target="_blank" rel="noopener">Web Fundamentals</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script" target="_blank" rel="noopener">MDN - HTML element reference</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;内容说明&quot;&gt;&lt;a href=&quot;#内容说明&quot; class=&quot;headerlink&quot; title=&quot;内容说明&quot;&gt;&lt;/a&gt;内容说明&lt;/h2&gt;&lt;p&gt;本文不是关于浏览器渲染的底层原理或前端优化具体细节的讲解，而是关于浏览器对页面的渲染——这一过程的描述及其背后原理的解释。这是因为前端优化是一个非常庞大且零散的知识集合，一篇文章如果要写优化的具体方法恐怕只能做一些有限的列举。&lt;/p&gt;
&lt;p&gt;然而，如果了解清楚浏览器的渲染过程、渲染原理，其实就掌握了指导原则。根据优化原则，可以实现出无数种具体的优化方案，各种预编译、预加载、资源合并、按需加载方案都是针对浏览器渲染习惯的优化。&lt;/p&gt;
&lt;h2 id=&quot;关键渲染路径&quot;&gt;&lt;a href=&quot;#关键渲染路径&quot; class=&quot;headerlink&quot; title=&quot;关键渲染路径&quot;&gt;&lt;/a&gt;关键渲染路径&lt;/h2&gt;&lt;p&gt;提到页面渲染，有几个相关度非常高的概念，最重要的是关键渲染路径，其他几个概念都可以从它展开，下面稍作说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键渲染路径（Critical Rendering Path）&lt;/strong&gt;是指与当前用户操作有关的内容。例如用户刚刚打开一个页面，首屏的显示就是当前用户操作相关的内容，具体就是浏览器收到 HTML、CSS 和 JavaScript 等资源并对其进行处理从而渲染出 Web 页面。&lt;/p&gt;
&lt;p&gt;了解浏览器渲染的过程与原理，很大程度上是为了&lt;strong&gt;优化关键渲染路径&lt;/strong&gt;，但优化应该是针对具体问题的解决方案，所以优化没有一定之规。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="Web" scheme="http://alphabao.github.io/tags/Web/"/>
    
      <category term="Browser" scheme="http://alphabao.github.io/tags/Browser/"/>
    
      <category term="HTML" scheme="http://alphabao.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="http://alphabao.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>从状态模式看 JavaScript 与 Java</title>
    <link href="http://alphabao.github.io/2016/10/29/state-pattern-the-difference-between-javascript-and-java/"/>
    <id>http://alphabao.github.io/2016/10/29/state-pattern-the-difference-between-javascript-and-java/</id>
    <published>2016-10-29T11:51:31.000Z</published>
    <updated>2022-03-19T13:00:34.900Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章缘起于前几天微博上有关动态语言与静态语言的讨论，因为有几个编程高手参加，所以能看到一些特别有启发性的发言。本文主要是下面这一条微博的读后感，也是我的练习与思考。</p><p><a href="http://weibo.com/1655747731/EebsQBk82" target="_blank" rel="noopener">@有个梨UGlee：如果你去看四人帮的Design Pattern里，就有State Pattern；State Pattern用类型编码State，就是我们说的问题；但是动态语言里写出来非常简单，类型语言里写得极其繁琐。</a></p><p>关于动态语言与静态语言，有很多比较和讨论它们的文章，但大部分都没有抓住重点。而上面一条微博，提到了一个很好的切入点，那就是「状态模式（State Pattern）」。</p><h2 id="状态模式：蝙蝠侠-x2F-布鲁斯·韦恩"><a href="#状态模式：蝙蝠侠-x2F-布鲁斯·韦恩" class="headerlink" title="状态模式：蝙蝠侠&#x2F;布鲁斯·韦恩"></a>状态模式：蝙蝠侠&#x2F;布鲁斯·韦恩</h2><p>蝙蝠侠（英语：Batman）是一名出现于DC漫画的虚构超级英雄角色，由鲍勃·凯恩和比尔·芬格创作。他的名字叫 Bruce，是一位美国亿万富翁，这是他的正常身份，用于正常生活，例如进行参加宴会之类的活动。他的另一个身份是 Batman，是打击犯罪的黑暗骑士。</p><p>这是一个状态模式的好示例，我用 Java 和 JavaScript 各写了一个示例，体会体会「极其繁琐」与「非常简单」。</p><a id="more"></a><h2 id="极其繁琐：Java-版本"><a href="#极其繁琐：Java-版本" class="headerlink" title="极其繁琐：Java 版本"></a>极其繁琐：Java 版本</h2><p>目录结构：</p><pre><code>com  |-- tianfangye    |-- Client.java    |-- person        |-- Person.java    |-- state        |-- BatmanState.java        |-- BruceState.java        |-- IState.java</code></pre><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianfangye.person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianfangye.state.IState;</span><br><span class="line"><span class="keyword">import</span> com.tianfangye.state.BruceState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前状态</span></span><br><span class="line">  <span class="keyword">private</span> IState state;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">new</span> BruceState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置当前状态</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeState</span><span class="params">(IState state)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = state;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变状态（变身）</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.convertState(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始行动</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.doActivities();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IState.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianfangye.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianfangye.person.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换状态</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertState</span><span class="params">(Person person)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行活动</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doActivities</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BruceState.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianfangye.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianfangye.person.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BruceState</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name = <span class="string">"- Bruce -"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换状态</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertState</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">    person.changeState(<span class="keyword">new</span> BatmanState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行活动</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doActivities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.name + <span class="string">" &lt;&gt; "</span> + <span class="string">"参加宴会"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BatmanState.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianfangye.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianfangye.person.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BatmanState</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name = <span class="string">"- Batman -"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换状态</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertState</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">    person.changeState(<span class="keyword">new</span> BruceState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行活动</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doActivities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.name + <span class="string">" &lt;&gt; "</span> + <span class="string">"打击犯罪"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Client.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianfangye;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tianfangye.person.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.takeAction();</span><br><span class="line">    person.convertState();</span><br><span class="line">    person.takeAction();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出：</p><ul><li><code>- Bruce - &lt;&gt; 参加宴会</code></li><li><code>- Batman - &lt;&gt; 打击犯罪</code></li></ul><p>关于状态模式的实现，GoF 的 Design Patterns 里面提到过一些需要考虑的方面，其中之一是「谁来定义状态的转换」。可以由状态的使用者（Person）实现，也可以由每个状态各自实现，各有利弊。上例由每个状态各自实现，接下来的 JavaScript 示例也是这种选择（对于示例程序，另一种实现更简单）。</p><h2 id="非常简单：JavaScript-版本"><a href="#非常简单：JavaScript-版本" class="headerlink" title="非常简单：JavaScript 版本"></a>非常简单：JavaScript 版本</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  _Bruce: &#123;</span><br><span class="line">    name: <span class="string">"- Bruce -"</span>,</span><br><span class="line">    convertState() &#123;</span><br><span class="line">      <span class="keyword">this</span>.identity = state._Batman;</span><br><span class="line">    &#125;,</span><br><span class="line">    takeAction() &#123;</span><br><span class="line">      <span class="built_in">window</span>.console.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> &lt;&gt; 参加宴会`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _Batman: &#123;</span><br><span class="line">    name: <span class="string">"- Batman -"</span>,</span><br><span class="line">    convertState() &#123;</span><br><span class="line">      <span class="keyword">this</span>.identity = state._Bruce;</span><br><span class="line">    &#125;,</span><br><span class="line">    takeAction() &#123;</span><br><span class="line">      <span class="built_in">window</span>.console.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> &lt;&gt; 打击犯罪`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  identity: state._Bruce,</span><br><span class="line">  convertState() &#123;</span><br><span class="line">    <span class="keyword">this</span>.identity.convertState.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  takeAction() &#123;</span><br><span class="line">    <span class="keyword">this</span>.identity.takeAction();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.takeAction();</span><br><span class="line">person.convertState();</span><br><span class="line">person.takeAction();</span><br></pre></td></tr></table></figure><p>程序输出：</p><ul><li><code>- Bruce - &lt;&gt; 参加宴会</code></li><li><code>- Batman - &lt;&gt; 打击犯罪</code></li></ul><p>可以看到，相比静态语言的版本，动态语言的版本竟是如此浑然天成！甚至不是在实现「设计模式」，只是对语言特性的正常使用而已。所以，什么是设计模式？聪明人应该想通了——设计模式是一个衍生问题，不是本质问题。本质问题是程序设计，是静态语言与动态语言，是静态类型与动态类型，是编程语言抽象。</p><p><a href="https://www.zhihu.com/people/excited-vczh" target="_blank" rel="noopener">@vczh</a>的一个知乎回答对这一点讲得很透彻：</p><p><a href="https://www.zhihu.com/question/23757237/answer/102665315" target="_blank" rel="noopener">设计模式说白了就是在不允许使用dynamic_cast的情况下如何让你的设计通过类型系统的检验，于是发明出了一大堆行之有效的做法。为什么不能用dynamic_cast？因为通常如果你可以通过修改设计来避免所有dynamic_cast，那你就得到了最优的性能（通常指的是系数，不是复杂度）。</a></p><p><a href="https://www.zhihu.com/question/23757237/answer/102665315" target="_blank" rel="noopener">但是很多人都知其然不知其所以然，盲目的背诵却不练习（这并不是让你不要去背诵），喜欢过度设计控制不住自己，还可以拿它来装逼等等。其实这都不是设计模式的问题，而是人的劣根性的问题，这些人不管学什么都是一样的，只不过设计模式把这些人的效果放大了。</a></p><p>显而易见，类型是个大问题！动态语言能做到非常简洁是由于动态类型系统的灵活性。它们在相当大的程度上简化了程度设计，也就是所谓的「非常简单」。要明白，这里的「简单」与「复杂」并不是指代码量的多少，也不是指语言特性使用的多少，而是指花费在程序设计上面的心思的多少。具体到本例，主要是下面两点：</p><ul><li>动态类型：不需要花心思去搞定类型检查。</li><li>运行时绑定上下文的 this 对象：不需要将有状态的对象传来传去。</li></ul><p>当然，这些灵活性并非没有代价（性能）。另外，关于动态语言与静态语言的选择，一直有很多工程问题上的争议（从文章开头的微博往下探索，可以找到大段这方面的争论）。我个人对于动态语言、静态语言没有明显偏好，只是喜欢把问题弄清楚——不论有没有偏好，偏好强烈还是微弱，这都是首要的一步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章缘起于前几天微博上有关动态语言与静态语言的讨论，因为有几个编程高手参加，所以能看到一些特别有启发性的发言。本文主要是下面这一条微博的读后感，也是我的练习与思考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://weibo.com/1655747731/EebsQBk82&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@有个梨UGlee：如果你去看四人帮的Design Pattern里，就有State Pattern；State Pattern用类型编码State，就是我们说的问题；但是动态语言里写出来非常简单，类型语言里写得极其繁琐。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于动态语言与静态语言，有很多比较和讨论它们的文章，但大部分都没有抓住重点。而上面一条微博，提到了一个很好的切入点，那就是「状态模式（State Pattern）」。&lt;/p&gt;
&lt;h2 id=&quot;状态模式：蝙蝠侠-x2F-布鲁斯·韦恩&quot;&gt;&lt;a href=&quot;#状态模式：蝙蝠侠-x2F-布鲁斯·韦恩&quot; class=&quot;headerlink&quot; title=&quot;状态模式：蝙蝠侠&amp;#x2F;布鲁斯·韦恩&quot;&gt;&lt;/a&gt;状态模式：蝙蝠侠&amp;#x2F;布鲁斯·韦恩&lt;/h2&gt;&lt;p&gt;蝙蝠侠（英语：Batman）是一名出现于DC漫画的虚构超级英雄角色，由鲍勃·凯恩和比尔·芬格创作。他的名字叫 Bruce，是一位美国亿万富翁，这是他的正常身份，用于正常生活，例如进行参加宴会之类的活动。他的另一个身份是 Batman，是打击犯罪的黑暗骑士。&lt;/p&gt;
&lt;p&gt;这是一个状态模式的好示例，我用 Java 和 JavaScript 各写了一个示例，体会体会「极其繁琐」与「非常简单」。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="Java" scheme="http://alphabao.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://alphabao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="动态语言" scheme="http://alphabao.github.io/tags/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    
      <category term="静态语言" scheme="http://alphabao.github.io/tags/%E9%9D%99%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>宅男视角看朱鹮</title>
    <link href="http://alphabao.github.io/2016/10/23/to-see-the-nipponia-nippon-from-a-nerdy-perspective/"/>
    <id>http://alphabao.github.io/2016/10/23/to-see-the-nipponia-nippon-from-a-nerdy-perspective/</id>
    <published>2016-10-23T07:27:07.000Z</published>
    <updated>2022-03-19T13:00:34.901Z</updated>
    
    <content type="html"><![CDATA[<p>阿部和重的《朱鹮》大概是目前最严肃的有关御宅族的小说了。书中的宅男鸨谷春生将现今社会的运转规则理解为“人类书写的剧本”。那么，如果这个剧本不够好，有办法改进它吗？</p><p>“正常的人”在自己的社会生活中相互约束，形成一种互相制衡的稳态。它的形成需要很长时间，可以称作“中年人的稳态”——年轻人是不适应它的。互联网的普及给了年轻人一种新的选择——成为御宅族——用宅着这种活动了解世界。</p><a id="more"></a><p>主要依赖网络了解世界的宅男宅女，无法全面认识和理解社会生活的真实现状。可是生活在“人类书写的剧本”中的“正常的人”扮演着各自的社会角色，从他们按部就班的生活来看，“剧本”显然没有给他们太多思考和行为的配额。反倒是宅男宅女更有时间思考自己和他人的命运——“正常的人”和御宅族，到底哪种人更固化和封闭呢？</p><p>剧本肯定是不完美的，甚至是不够好的——谁来修改呢？最有条件做出行动的竟然是御宅族吗？至少在鸨谷春生看来自己应该出发了……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿部和重的《朱鹮》大概是目前最严肃的有关御宅族的小说了。书中的宅男鸨谷春生将现今社会的运转规则理解为“人类书写的剧本”。那么，如果这个剧本不够好，有办法改进它吗？&lt;/p&gt;
&lt;p&gt;“正常的人”在自己的社会生活中相互约束，形成一种互相制衡的稳态。它的形成需要很长时间，可以称作“中年人的稳态”——年轻人是不适应它的。互联网的普及给了年轻人一种新的选择——成为御宅族——用宅着这种活动了解世界。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂文" scheme="http://alphabao.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="日本" scheme="http://alphabao.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
      <category term="小说" scheme="http://alphabao.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="阿部和重" scheme="http://alphabao.github.io/tags/%E9%98%BF%E9%83%A8%E5%92%8C%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中的异步：Event Loop 及其他</title>
    <link href="http://alphabao.github.io/2016/09/30/javascript-asynchrony-eventloopqueue-and-jobqueue/"/>
    <id>http://alphabao.github.io/2016/09/30/javascript-asynchrony-eventloopqueue-and-jobqueue/</id>
    <published>2016-09-30T01:11:31.000Z</published>
    <updated>2022-03-19T13:00:34.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>简单地说，JavaScript 是单线程执行的语言，但在使用中有很多异步执行的情况。异步的本质是用其他方式（相对同步）控制程序的执行顺序，这与其他语言中的多线程模型不同，所以常常有人对<strong>非顺序</strong> JavaScript 代码的运行结果感到困惑不解。</p><h3 id="一段简单的小程序"><a href="#一段简单的小程序" class="headerlink" title="一段简单的小程序"></a>一段简单的小程序</h3><p>任何使用过 JavaScript 的程序员都能说出下面这段代码的输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"C"</span>);</span><br></pre></td></tr></table></figure><p>先后顺序是 <code>A、C、B</code>，因为第二个参数的作用是指定延迟的毫秒数，这段代码只有一个 setTimeout，所以不会让人迷惑。</p><p>对类似程序的解释通常是由 setTimeout 设置一个定时器，在指定毫秒数后调用回调函数。然而，它的执行机制并不是这么简单。<strong>实际上，setTimeout 的作用是在指定的毫秒数之后，在得到机会时，将 callback 放入 Event Loop Queue</strong>。</p><h3 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h3><a id="more"></a><p>首先要抛出一些概念，通常所说的 JavaScript Engine 是指负责执行一个一个 chunk 的程序，它依赖宿主环境的调度，也需要通过宿主环境与操作系统产生关联并得到支持。JavaScript Engine 是 JavaScript Runtime(Hosting Environment) 的一部分。</p><p>每个 chunk 通常是以 function 为单位，一个 chunk 执行完成后，才会执行下一个 chunk。下一个 chunk 是什么呢？取决于当前 Event Loop Queue 中的队首。Event Loop Queue 中存放的都是消息，每个消息关联着一个函数，JavaScript Engine 就按照队列中的消息顺序执行它们，也就是执行 chunk。</p><p>所以上面的 setTimeout 实际执行起来更接近这样：</p><ul><li><p>chunk1执行：由 setTimeout 启动定时器（100毫秒）</p></li><li><p>chunk2执行：得到机会，将 callback 放入 Event Loop Queue</p></li><li><p>chunk3执行：此 callback 执行</p></li></ul><p>不难发现，<strong>得到机会</strong>很重要！这也就可以解释用 setTimeout 延迟 1000 不一定是准确的，而是会至少延迟一秒。因为如果还有其他的任务在前面，它要等待那些任务对应的消息都出队，也就是程序都执行完成，它才能将 callback 放入队列。也就是实际延迟会大于或等于一秒。</p><p>通常所说的触发了一个事件，就是指这个 event listener 得到了执行。与 setTimeout 这个例子中的概念一样，这也是一次 chunk 的执行。像这样一个一个执行 chunk 的过程就叫 <strong>Event Loop</strong>。</p><p>还有一个经常提到的概念叫「无阻塞」，JavaScript 中的无阻塞就是指这种 Event Loop 模型。除去 alert 或同步 Ajax 请求等历史原因造成的问题，程序总是不会出现阻塞；也就是说 JavaScript Engine 总是可以处理下一个任务，如处理用户对浏览器的操作。</p><h3 id="一些简单的小例子"><a href="#一些简单的小例子" class="headerlink" title="一些简单的小例子"></a>一些简单的小例子</h3><p>将 setTimeout 加入 try 语句之中，结果会如何？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error - from try statement"</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try catch 与 setTimeout 不在同一个 chunk，所以……你懂的。</p><p>再看下一个。</p><p>下面的堆栈信息会输出 C - B - A 吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error - from function C"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>它们并不对应同一条 Event Loop Queue 中的消息，分别有各自的调用栈，所以错误栈里面只有 C。</p><h3 id="Job-Queue"><a href="#Job-Queue" class="headerlink" title="Job Queue"></a>Job Queue</h3><p>Job 是 ES6 中新增的概念，它与 Promise 的执行有关，可以理解为等待执行的任务；Job Queue 就是这种类型的任务的队列。JavaScript Runtime 对于 Job Queue 与 Event Loop Queue 的处理有所不同。</p><p>相同点：</p><ul><li>都用作先进先出队列</li></ul><p>相异点：</p><ul><li><p>每个 JavaScript Runtime 可以有多个 Job Queue，但只有一个 Event Loop Queue</p></li><li><p>当 JavaScript Engine 处理完当前 chunk 后，优先执行所有的 Job Queue，然后再处理 Event Loop Queue</p></li></ul><p>ES6 中，一个 Promise 就是一个 PromiseJob，一种 Job。</p><p>再来观察一段小程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"A - setTimeout"</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"A - Promise 1"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"B - Promise 1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"A - Promise 2"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"B - Promise 2"</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"C - Promise 2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"AA"</span>);</span><br></pre></td></tr></table></figure><p>在原生支持 Promise 的环境，输出是这样：</p><p><code>A</code><br><code>AA</code><br><code>A - Promise 1</code><br><code>A - Promise 2</code><br><code>B - Promise 1</code><br><code>B - Promise 2</code><br><code>C - Promise 2</code><br><code>A - setTimeout</code></p><p>理解这个输出：</p><ul><li><p>A 与 AA 最先输出，因为它们不是异步任务，属于第一个 chunk。</p></li><li><p>Promise 1 与 Promise 2 先于 setTimeout 执行，因为 Job Queue 的执行优先于 Event Loop Queue。</p></li><li><p>Promise 1 与 Promise 2 各自的输出都是顺序的，因为 Job Queue 是先进先出队列，同一 Job Queue 中的任务顺序执行。</p></li><li><p>Promise 1 与 Promise 2 的后续任务是交错的，因为 Promise 1 与 Promise 2 都是独立的 PromiseJob（job 的其中一种），属于不同的 Job Queue，它们之间的顺序规范中没有规定。</p></li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>文章开头，我说「简单地说，JavaScript 是单线程执行的语言」，现在可以说得稍微复杂一点了：JavaScript Engine 对 JavaScript 程序的执行是单线程的，但是 JavaScript Runtime（整个宿主环境）并不是单线程的；而且，几乎所有的异步任务都是并发的，例如多个 Job Queue、Ajax、Timer、I&#x2F;O(Node)等等。</p><p>上面说的是 JavaScript Runtime 层面，从开发者的 JavaScript 代码执行层面来说，也有一些特殊情况，例如：一个 Web Worker，是一个独立的线程，有自己的内存空间（栈、堆）以及 Event Loop Queue。要与这样的不同的线程通信，只能通过 postMessage。一次 postMessage 就是在另一个线程的 Event Loop Queue 中加入一条消息。</p><p>而一个<strong>跨域的</strong> iframe 中，JavaScript 也有单独的内存空间（栈、堆）以及 Event Loop Queue，也只能通过 postMessage 与它通信。至于它与主页面是否运行在同一线程内，取决于浏览器的实现（目前是在同一线程内）。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">Concurrency model and Event Loop</a><br><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues" target="_blank" rel="noopener">ECMAScript® 2015 Language Specification</a><br><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch1.md" target="_blank" rel="noopener">You Don’t Know JS: Async &amp; Performance</a><br><a href="http://www.ituring.com.cn/book/1132" target="_blank" rel="noopener">JavaScript异步编程：设计快速响应的网络应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异步&quot;&gt;&lt;a href=&quot;#异步&quot; class=&quot;headerlink&quot; title=&quot;异步&quot;&gt;&lt;/a&gt;异步&lt;/h2&gt;&lt;p&gt;简单地说，JavaScript 是单线程执行的语言，但在使用中有很多异步执行的情况。异步的本质是用其他方式（相对同步）控制程序的执行顺序，这与其他语言中的多线程模型不同，所以常常有人对&lt;strong&gt;非顺序&lt;/strong&gt; JavaScript 代码的运行结果感到困惑不解。&lt;/p&gt;
&lt;h3 id=&quot;一段简单的小程序&quot;&gt;&lt;a href=&quot;#一段简单的小程序&quot; class=&quot;headerlink&quot; title=&quot;一段简单的小程序&quot;&gt;&lt;/a&gt;一段简单的小程序&lt;/h3&gt;&lt;p&gt;任何使用过 JavaScript 的程序员都能说出下面这段代码的输出：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;先后顺序是 &lt;code&gt;A、C、B&lt;/code&gt;，因为第二个参数的作用是指定延迟的毫秒数，这段代码只有一个 setTimeout，所以不会让人迷惑。&lt;/p&gt;
&lt;p&gt;对类似程序的解释通常是由 setTimeout 设置一个定时器，在指定毫秒数后调用回调函数。然而，它的执行机制并不是这么简单。&lt;strong&gt;实际上，setTimeout 的作用是在指定的毫秒数之后，在得到机会时，将 callback 放入 Event Loop Queue&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Event-Loop&quot;&gt;&lt;a href=&quot;#Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;Event Loop&quot;&gt;&lt;/a&gt;Event Loop&lt;/h3&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="异步" scheme="http://alphabao.github.io/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="Event Loop" scheme="http://alphabao.github.io/tags/Event-Loop/"/>
    
      <category term="Job Queue" scheme="http://alphabao.github.io/tags/Job-Queue/"/>
    
  </entry>
  
  <entry>
    <title>使用 Karma、Mocha、Chai 搭建支持 ES6 的测试环境</title>
    <link href="http://alphabao.github.io/2016/09/02/karma-mocha-chai-webpack-es6/"/>
    <id>http://alphabao.github.io/2016/09/02/karma-mocha-chai-webpack-es6/</id>
    <published>2016-09-02T03:17:55.000Z</published>
    <updated>2022-03-19T13:00:34.899Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发很多是界面开发，但我们可以将相对独立的逻辑和功能从整体业务逻辑中独立出来，这样就可以对它们做单元测试。使用 Karma 可以比较方便地搭建出测试环境。</p><h3 id="安装-Karma"><a href="#安装-Karma" class="headerlink" title="安装 Karma"></a>安装 Karma</h3><p>使用 <code>Karma</code> <code>Mocha</code> <code>Chai</code>（启动器、测试框架、断言库）组合。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install karma karma-mocha karma-chai --save-dev</span><br></pre></td></tr></table></figure><p>如果 npm 版本 &gt;&#x3D;3.0，会看到如下提示：</p><blockquote><p>UNMET PEER DEPENDENCY chai@*<br><a href="mailto:&#107;&#x61;&#x72;&#x6d;&#x61;&#x40;&#x31;&#x2e;&#x32;&#46;&#48;">&#107;&#x61;&#x72;&#x6d;&#x61;&#x40;&#x31;&#x2e;&#x32;&#46;&#48;</a><br><a href="mailto:&#x6b;&#97;&#114;&#109;&#97;&#x2d;&#99;&#104;&#97;&#x69;&#64;&#x30;&#x2e;&#x31;&#x2e;&#48;">&#x6b;&#97;&#114;&#109;&#97;&#x2d;&#99;&#104;&#97;&#x69;&#64;&#x30;&#x2e;&#x31;&#x2e;&#48;</a><br><a href="mailto:&#x6b;&#97;&#114;&#109;&#x61;&#45;&#109;&#111;&#x63;&#104;&#97;&#x40;&#49;&#46;&#x31;&#46;&#49;">&#x6b;&#97;&#114;&#109;&#x61;&#45;&#109;&#111;&#x63;&#104;&#97;&#x40;&#49;&#46;&#x31;&#46;&#49;</a><br>UNMET PEER DEPENDENCY mocha@*</p></blockquote><p>这是因为 npm 已经不再自动安装 peerDependencies：<br><a href="http://blog.npmjs.org/post/110924823920/npm-weekly-5" target="_blank" rel="noopener">We will also be changing the behavior of peerDependencies in npm@3. We won’t be automatically downloading the peer dependency anymore. Instead, we’ll warn you if the peer dependency isn’t already installed. This requires you to resolve peerDependency conflicts yourself, manually, but in the long run this should make it less likely that you’ll end up in a tricky spot with your packages’ dependencies.</a></p><a id="more"></a><p>于是继续安装 <code>mocha</code> <code>chai</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mocha chai --save-dev</span><br></pre></td></tr></table></figure><h3 id="初始化-Karma"><a href="#初始化-Karma" class="headerlink" title="初始化 Karma"></a>初始化 Karma</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">karma init</span><br></pre></td></tr></table></figure><p>然后要回答一系列问题。</p><blockquote><p>Which testing framework do you want to use ?<br>Press tab to list possible options. Enter to move to the next question.<br>&gt; mocha</p><p>Do you want to use Require.js ?<br>This will add Require.js plugin.<br>Press tab to list possible options. Enter to move to the next question.<br>&gt; no</p><p>Do you want to capture any browsers automatically ?<br>Press tab to list possible options. Enter empty string to move to the next question.<br>&gt; Chrome</p><p>What is the location of your source and test files ?<br>You can use glob patterns, eg. “js&#x2F;*.js” or “test&#x2F;**&#x2F;<em>Spec.js”.<br>Enter empty string to move to the next question.<br>&gt; “test&#x2F;**&#x2F;</em>.spec.js”<br>01 09 2016 16:43:20.743:WARN [init]: There is no file matching this pattern.</p><p>&gt; </p><p>Should any of the files included by the previous patterns be excluded ?<br>You can use glob patterns, eg. “**&#x2F;*.swp”.<br>Enter empty string to move to the next question.<br>&gt; </p><p>Do you want Karma to watch all the files and run the tests on change ?<br>Press tab to list possible options.<br>&gt; yes</p></blockquote><p>然后就可以看到 <code>Karma</code> 已经创建的配置文件 <code>karma.conf.js</code>。如果选择使用 <code>PhantomJS</code>，需要单独安装。</p><h3 id="添加-ES6-支持"><a href="#添加-ES6-支持" class="headerlink" title="添加 ES6 支持"></a>添加 ES6 支持</h3><p>现在前端开发的源码一般使用了 ES6 甚至 ES7，将这个处理工作用 webpack 搞定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install karma-webpack --save-dev</span><br></pre></td></tr></table></figure><p>既然将 ES6 的处理交给 webpack，如果之前没有安装过 babel 环境，还需要安装 <code>babel-core</code> <code>babel-preset-es2015</code> 以及 <code>babel-loader</code>。 </p><p>如果出现下面的 <code>TypeError</code> 错误，只要在 exclude 中加入 &#x2F;node_modules&#x2F; 就好了。</p><blockquote><p>TypeError: ‘caller’, ‘callee’, and ‘arguments’ properties may not be accessed on strict mode functions or the arguments objects for calls to them</p></blockquote><p>配置文件 <code>karma.conf.js</code> 中，需要注意的还有 <code>files</code> <code>preprocessors</code> 以及 <code>webpack</code> 部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Karma configuration</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.set(&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    files: [</span><br><span class="line">      <span class="string">'test/**/*.spec.js'</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    preprocessors: &#123;</span><br><span class="line">      <span class="string">'test/**/*.spec.js'</span>: [<span class="string">'webpack'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    webpack: &#123;</span><br><span class="line">      resolve: &#123;</span><br><span class="line">        root: __dirname + <span class="string">"/src"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">          test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          exclude: [<span class="regexp">/node_modules/</span>, __dirname + <span class="string">"xxx/xxx/lib"</span>],</span><br><span class="line">          loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">          query: &#123;</span><br><span class="line">            compact: <span class="literal">false</span>,</span><br><span class="line">            presets: [<span class="string">"es2015"</span>],</span><br><span class="line">            plugins: [<span class="string">"es6-promise"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-Karma"><a href="#启动-Karma" class="headerlink" title="启动 Karma"></a>启动 Karma</h3><p>编写测试用例，这里是一个使用断言库 <code>Chai</code>，并使用它的 <code>expect</code> 断言风格的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getMoneyText&#125; <span class="keyword">from</span> <span class="string">"xxx/xxx.js"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">"chai"</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"生成价格文案"</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">"价格文案：积分"</span>, () =&gt; &#123;</span><br><span class="line">    expect(getMoneyText(&#123;</span><br><span class="line">      payType: <span class="number">1</span>,</span><br><span class="line">      price: <span class="number">100</span>,</span><br><span class="line">      points: <span class="number">100</span>,</span><br><span class="line">    &#125;)).to.be.equal(<span class="string">"100积分"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"价格文案：人民币"</span>, () =&gt; &#123;</span><br><span class="line">    expect(getMoneyText(&#123;</span><br><span class="line">      payType: <span class="number">2</span>,</span><br><span class="line">      price: <span class="number">100</span>,</span><br><span class="line">      points: <span class="number">100</span>,</span><br><span class="line">    &#125;)).to.be.equal(<span class="string">"￥100.00"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"价格文案：人民币+积分"</span>, () =&gt; &#123;</span><br><span class="line">    expect(getMoneyText(&#123;</span><br><span class="line">      payType: <span class="number">3</span>,</span><br><span class="line">      price: <span class="number">100</span>,</span><br><span class="line">      points: <span class="number">100</span>,</span><br><span class="line">    &#125;)).to.be.equal(<span class="string">"￥100.00+100积分"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">"价格文案：人民币+积分（多份数量）"</span>, () =&gt; &#123;</span><br><span class="line">    expect(getMoneyText(&#123;</span><br><span class="line">      payType: <span class="number">3</span>,</span><br><span class="line">      number: <span class="number">5</span>,</span><br><span class="line">      price: <span class="number">100</span>,</span><br><span class="line">      points: <span class="number">100</span>,</span><br><span class="line">    &#125;)).to.be.equal(<span class="string">"￥500.00+500积分"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>启动 <code>Karma</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">karma start</span><br></pre></td></tr></table></figure><p>关于 Mocha （Chai, expect）的入门教程可以参考：<a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">测试框架 Mocha 实例教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端开发很多是界面开发，但我们可以将相对独立的逻辑和功能从整体业务逻辑中独立出来，这样就可以对它们做单元测试。使用 Karma 可以比较方便地搭建出测试环境。&lt;/p&gt;
&lt;h3 id=&quot;安装-Karma&quot;&gt;&lt;a href=&quot;#安装-Karma&quot; class=&quot;headerlink&quot; title=&quot;安装 Karma&quot;&gt;&lt;/a&gt;安装 Karma&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;Karma&lt;/code&gt; &lt;code&gt;Mocha&lt;/code&gt; &lt;code&gt;Chai&lt;/code&gt;（启动器、测试框架、断言库）组合。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install karma karma-mocha karma-chai --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果 npm 版本 &amp;gt;&amp;#x3D;3.0，会看到如下提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UNMET PEER DEPENDENCY chai@*&lt;br&gt;&lt;a href=&quot;mailto:&amp;#107;&amp;#x61;&amp;#x72;&amp;#x6d;&amp;#x61;&amp;#x40;&amp;#x31;&amp;#x2e;&amp;#x32;&amp;#46;&amp;#48;&quot;&gt;&amp;#107;&amp;#x61;&amp;#x72;&amp;#x6d;&amp;#x61;&amp;#x40;&amp;#x31;&amp;#x2e;&amp;#x32;&amp;#46;&amp;#48;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;mailto:&amp;#x6b;&amp;#97;&amp;#114;&amp;#109;&amp;#97;&amp;#x2d;&amp;#99;&amp;#104;&amp;#97;&amp;#x69;&amp;#64;&amp;#x30;&amp;#x2e;&amp;#x31;&amp;#x2e;&amp;#48;&quot;&gt;&amp;#x6b;&amp;#97;&amp;#114;&amp;#109;&amp;#97;&amp;#x2d;&amp;#99;&amp;#104;&amp;#97;&amp;#x69;&amp;#64;&amp;#x30;&amp;#x2e;&amp;#x31;&amp;#x2e;&amp;#48;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;mailto:&amp;#x6b;&amp;#97;&amp;#114;&amp;#109;&amp;#x61;&amp;#45;&amp;#109;&amp;#111;&amp;#x63;&amp;#104;&amp;#97;&amp;#x40;&amp;#49;&amp;#46;&amp;#x31;&amp;#46;&amp;#49;&quot;&gt;&amp;#x6b;&amp;#97;&amp;#114;&amp;#109;&amp;#x61;&amp;#45;&amp;#109;&amp;#111;&amp;#x63;&amp;#104;&amp;#97;&amp;#x40;&amp;#49;&amp;#46;&amp;#x31;&amp;#46;&amp;#49;&lt;/a&gt;&lt;br&gt;UNMET PEER DEPENDENCY mocha@*&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是因为 npm 已经不再自动安装 peerDependencies：&lt;br&gt;&lt;a href=&quot;http://blog.npmjs.org/post/110924823920/npm-weekly-5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;We will also be changing the behavior of peerDependencies in npm@3. We won’t be automatically downloading the peer dependency anymore. Instead, we’ll warn you if the peer dependency isn’t already installed. This requires you to resolve peerDependency conflicts yourself, manually, but in the long run this should make it less likely that you’ll end up in a tricky spot with your packages’ dependencies.&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Karma" scheme="http://alphabao.github.io/tags/Karma/"/>
    
      <category term="Mocha" scheme="http://alphabao.github.io/tags/Mocha/"/>
    
      <category term="Webpack" scheme="http://alphabao.github.io/tags/Webpack/"/>
    
      <category term="ES6" scheme="http://alphabao.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>CSS：min-height百分比问题</title>
    <link href="http://alphabao.github.io/2015/11/04/css-min-height/"/>
    <id>http://alphabao.github.io/2015/11/04/css-min-height/</id>
    <published>2015-11-04T10:10:58.000Z</published>
    <updated>2022-03-19T13:00:34.896Z</updated>
    
    <content type="html"><![CDATA[<p>对于高度不确定的页面，想实现总是撑满一屏的效果，可以结合 height 与 min-height 来设置，但是有一些瑕疵。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html 与 body 都设置为 <code>min-height: 100%</code>，意图是想页面高度不足一屏时 body 高度为一屏的高度，高度超过一屏则 body 的高度为页面的高度。但这样设置后会发现， html 的高度变成了 100%（一屏的高度），而 body 的高度却是 0。那么将 body 的子元素设为 <code>min-height: 100%</code> 时，这个元素的高度自然也是 0（除非靠内容撑开）。</p><p>试验发现，如果将 min-height 的值设置为百分比，那么上一级元素必须有一个明确的高度（不能是 min-height: 100%），否则高度是 0。</p><a id="more"></a><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 html 设置为 <code>height: 100%</code>，而 body 设置为 <code>min-height: 100%</code>，则 html 与 body 的高度都变成了 100%（一屏的高度）。但是对照上一条结论，min-height 的上一级元素必须有一个明确的高度，body 的子元素设为 <code>min-height: 100%</code> 时，这个元素的高度却依然是 0（除非靠内容撑开）。</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html 与 body 都设置为 <code>height: 100%</code>，则 html 与 body 的高度都变成了 100%（一屏的高度）。body 的子元素设为 <code>min-height: 100%</code> 时，这个元素的高度也是一屏高度。这种方式的问题在于，body 中内容变多后，高度超过一个屏幕时，body 的高度仍然是 100%（一屏的高度），不影响滚动，但看起来不自然。</p><p><em>Chrome: Version 46.0.2490.80 (64-bit)</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于高度不确定的页面，想实现总是撑满一屏的效果，可以结合 height 与 min-height 来设置，但是有一些瑕疵。&lt;/p&gt;
&lt;h3 id=&quot;示例-1：&quot;&gt;&lt;a href=&quot;#示例-1：&quot; class=&quot;headerlink&quot; title=&quot;示例 1：&quot;&gt;&lt;/a&gt;示例 1：&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;min-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;html 与 body 都设置为 &lt;code&gt;min-height: 100%&lt;/code&gt;，意图是想页面高度不足一屏时 body 高度为一屏的高度，高度超过一屏则 body 的高度为页面的高度。但这样设置后会发现， html 的高度变成了 100%（一屏的高度），而 body 的高度却是 0。那么将 body 的子元素设为 &lt;code&gt;min-height: 100%&lt;/code&gt; 时，这个元素的高度自然也是 0（除非靠内容撑开）。&lt;/p&gt;
&lt;p&gt;试验发现，如果将 min-height 的值设置为百分比，那么上一级元素必须有一个明确的高度（不能是 min-height: 100%），否则高度是 0。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="CSS" scheme="http://alphabao.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>PPK《移动Web手册》读书笔记</title>
    <link href="http://alphabao.github.io/2015/10/01/the-mobile-web-handbook-reading-notes/"/>
    <id>http://alphabao.github.io/2015/10/01/the-mobile-web-handbook-reading-notes/</id>
    <published>2015-10-01T04:16:06.000Z</published>
    <updated>2022-03-19T13:00:34.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>大多数内置浏览器都被紧密集成到底层的操作系统中，无法单独升级。设备供应商经常拒绝给他们的内置浏览器命名，iOS 的内置浏览器叫作 Safari，而 Android、黑莓、塞班的内置浏览器没有名字，作者把它们叫作「安卓WebKit」「黑莓WebKit」「塞班WebKit」。</p><h3 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h3><p>一个智能系统需要一个浏览器，安卓系统提供了基于 WebKit 的浏览器；它没有名字，英文网站上一般称之为「Android Browser」，作者称之为「安卓WebKit」。</p><p>安卓WebKit 并不是 Chrome：它有完全分离的代码库，里面有完全分离的漏洞。查看 userAgent 是否含有 Chrome 这个单词，可以区分 安卓WebKit 与 Chrome。安卓WebKit 包含大量开关，用来打开或关闭特定功能，设备厂商可以随心所欲地设置这些开关。所以 三星安卓WebKit 与 索尼安卓WebKit 并不相同。</p><a id="more"></a><p>谷歌想利用 Chrome 代替 安卓WebKit，这有利于谷歌收集用户数据并提供更强大的广告；设备厂商系统自己获取用户数据，并且希望继续使自己的设备与众不同。</p><p>谷歌强制所有使用谷歌服务的设备使用 Google Chrome，但设备厂商能改变手机的内置浏览器。 HTC M8 的内置浏览器是 安卓WebKit，但它也安装了 Google Chrome；三星 S4 安装了两款基于 Chromium（人人都可以下载和修改的谷歌开源浏览器）的浏览器：三星Chrome 和 Google Chrome。</p><p>亚马逊拒绝了谷歌服务，因此 Amazon Kindle Fire 中内置的是 Silk（基于 Chromium）。</p><p>绝大多数国内厂商，比如小米、魅族的情况类似亚马逊，它们自己定制了安卓系统，也就定制了自己的浏览器（它们都不需要带 Google Chrome）。</p><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3><p>WebView 是留给原生应用的一个操作系统浏览接口。大体上，WebView 是独立的程序，用了内置浏览器很多底层的组件（比如渲染引擎），但是在其他方面可能会有所不同。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器&quot;&gt;&lt;a href=&quot;#浏览器&quot; class=&quot;headerlink&quot; title=&quot;浏览器&quot;&gt;&lt;/a&gt;浏览器&lt;/h2&gt;&lt;p&gt;大多数内置浏览器都被紧密集成到底层的操作系统中，无法单独升级。设备供应商经常拒绝给他们的内置浏览器命名，iOS 的内置浏览器叫作 Safari，而 Android、黑莓、塞班的内置浏览器没有名字，作者把它们叫作「安卓WebKit」「黑莓WebKit」「塞班WebKit」。&lt;/p&gt;
&lt;h3 id=&quot;安卓&quot;&gt;&lt;a href=&quot;#安卓&quot; class=&quot;headerlink&quot; title=&quot;安卓&quot;&gt;&lt;/a&gt;安卓&lt;/h3&gt;&lt;p&gt;一个智能系统需要一个浏览器，安卓系统提供了基于 WebKit 的浏览器；它没有名字，英文网站上一般称之为「Android Browser」，作者称之为「安卓WebKit」。&lt;/p&gt;
&lt;p&gt;安卓WebKit 并不是 Chrome：它有完全分离的代码库，里面有完全分离的漏洞。查看 userAgent 是否含有 Chrome 这个单词，可以区分 安卓WebKit 与 Chrome。安卓WebKit 包含大量开关，用来打开或关闭特定功能，设备厂商可以随心所欲地设置这些开关。所以 三星安卓WebKit 与 索尼安卓WebKit 并不相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Web" scheme="http://alphabao.github.io/tags/Web/"/>
    
      <category term="Mobile" scheme="http://alphabao.github.io/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>URL字符集的编码与解码：escape unescape encodeURI decodeURI encodeURIComponent decodeURIComponent</title>
    <link href="http://alphabao.github.io/2015/09/06/escape-unescape-encodeURI-decodeURI-encodeURIComponent-decodeURIComponent/"/>
    <id>http://alphabao.github.io/2015/09/06/escape-unescape-encodeURI-decodeURI-encodeURIComponent-decodeURIComponent/</id>
    <published>2015-09-06T08:20:59.000Z</published>
    <updated>2022-03-19T13:00:34.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>escape<br>unescape</li></ul></blockquote><blockquote><ul><li>encodeURI<br>decodeURI</li></ul></blockquote><blockquote><ul><li>encodeURIComponent<br>decodeURIComponent</li></ul></blockquote><p>这六个方法功能有关联，如果不清楚每一个的作用，很容易混淆。问题的本质，是如何在 URL 中正确处理各种令人头疼的字符。<a id="more"></a></p><p>首先，<code>escape unescape</code> 已经废弃，应当避免使用。</p><blockquote><ul><li>The deprecated escape() method computes a new string in which certain characters have been replaced by a hexadecimal escape sequence. Use encodeURI or encodeURIComponent instead.</li></ul></blockquote><blockquote><ul><li>The deprecated unescape() method computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Because unescape is deprecated, use decodeURI or decodeURIComponent instead.</li></ul></blockquote><p>根据 MDN 的说明，escape 应当换用为 encodeURI 或 encodeURIComponent；unescape 应当换用为 decodeURI 或 decodeURIComponent。</p><p>那么，问题就简化为 <code>encodeURI decodeURI</code> 与 <code>encodeURIComponent decodeURIComponent</code> 的区分。encodeURI 应当用于整个 URI 的编码，encodeURIComponent 应当用于 URI 中某个部分的编码。</p><p> 如果用 URL 举例，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">encodeURI</span>(<span class="string">'https://www.baidu.com/ a b c'</span>)</span><br><span class="line"><span class="comment">// "https://www.baidu.com/%20a%20b%20c"</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">'https://www.baidu.com/ a b c'</span>)</span><br><span class="line"><span class="comment">// "https%3A%2F%2Fwww.baidu.com%2F%20a%20b%20c"</span></span><br></pre></td></tr></table></figure><p>而 escape 会编码成下面这样，不伦不类，所以废弃。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>(<span class="string">'https://www.baidu.com/ a b c'</span>)</span><br><span class="line"><span class="comment">// "https%3A//www.baidu.com/%20a%20b%20c"</span></span><br></pre></td></tr></table></figure><p>由此可知，前端开发中用到最多的应该是 encodeURIComponent&#x2F;decodeURIComponent。例如下面这个将 URL Search 中的参数转化为对象的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parseUrlSearch = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> query = <span class="built_in">window</span>.location.search.slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  query.split(<span class="string">"&amp;"</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">part</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = part.split(<span class="string">"="</span>);</span><br><span class="line">    result[item[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;escape&lt;br&gt;unescape&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;encodeURI&lt;br&gt;decodeURI&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;encodeURIComponent&lt;br&gt;decodeURIComponent&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这六个方法功能有关联，如果不清楚每一个的作用，很容易混淆。问题的本质，是如何在 URL 中正确处理各种令人头疼的字符。
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="URL" scheme="http://alphabao.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>Base64：window.atob 的兼容性问题</title>
    <link href="http://alphabao.github.io/2015/09/06/base64-decoding-problem/"/>
    <id>http://alphabao.github.io/2015/09/06/base64-decoding-problem/</id>
    <published>2015-09-06T07:29:13.000Z</published>
    <updated>2022-03-19T13:00:34.895Z</updated>
    
    <content type="html"><![CDATA[<p>对于 Base64 编码，浏览器提供的原生方法是 <code>window.btoa</code> 和 <code>window.atob</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> encodedData = <span class="built_in">window</span>.btoa(<span class="string">"Hello, world"</span>); <span class="comment">// encode a string</span></span><br><span class="line"><span class="keyword">var</span> decodedData = <span class="built_in">window</span>.atob(encodedData); <span class="comment">// decode the string</span></span><br></pre></td></tr></table></figure><p>从 <a href="http://caniuse.com/#search=Base64" target="_blank" rel="noopener">caniuse.com</a> 的数据来看，IE10 才开始支持这两个方法；而 iOS 和 Android 都很早就支持了，似乎可以用在移动端。但是在使用 <code>atob</code> 的过程中，还是遇到了兼容性问题。在 Chrome for Android 中可以正常解码，但是在 iOS Safari 中出现了下面这个错误：</p><blockquote><p>DOM Exception 5: An invalid or illegal character was specified, such as in an XML name</p></blockquote><p>无奈之下，还是找了个第三方库 <a href="https://github.com/dankogai/js-base64" target="_blank" rel="noopener">https://github.com/dankogai/js-base64</a>，用了之后 Android、iOS 都可以正常解码了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于 Base64 编码，浏览器提供的原生方法是 &lt;code&gt;window.btoa&lt;/code&gt; 和 &lt;code&gt;window.atob&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="Base64" scheme="http://alphabao.github.io/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 分号问题</title>
    <link href="http://alphabao.github.io/2015/06/06/semicolons-in-javascript/"/>
    <id>http://alphabao.github.io/2015/06/06/semicolons-in-javascript/</id>
    <published>2015-06-06T12:43:52.000Z</published>
    <updated>2022-03-19T13:00:34.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>JavaScript 分号之争由来已久，目前最被认可的结论是：<strong>JavaScript 语句末尾是否加分号是一个编程风格问题，可以加，也可以不加。</strong></p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><blockquote><p>事情总要有个决定的！<br>——卫斯理《只限老友》（卫斯理系列最后一句话）</p></blockquote><p>那么，到底加不加分号呢？</p><p>既然是一个风格问题，我们要明白的是如何选择。选择之前，我们来看看做出选择的前提是什么：</p><ul><li><p><code>加分号</code>：前提是你了解如何以加分号的方式写 JavaScript。</p></li><li><p><code>不加分号</code>：前提是你了解如何以不加分号的方式写 JavaScript。</p></li></ul><a id="more"></a><p>初期，了解哪种，选择哪种。如果都不了解，其实你只是胡乱写 JavaScript。若都有了解，自然可以根据喜好，任性！不过我们往往需要考虑更多，如今这个<strong>你也造轮子，我也改框架</strong>的时代，其实我们需要同时了解这两种规则，这是语言设计带来的问题（JavaScript 有自动插入分号的机制，然而并不可靠），避无可避。</p><h2 id="不加分号"><a href="#不加分号" class="headerlink" title="不加分号"></a>不加分号</h2><p>选择不加分号的风格，就要了解哪些情况下不加分号会产生歧义，然后避免。</p><p>最著名的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span></span><br><span class="line">&#123;</span><br><span class="line">  index: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>return 后面会自动加入上分号，这并不是期望的结果。所以，要写成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  index: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是一个<strong>不想加而被加</strong>的例子，下面看一个<strong>想被加而没有加</strong>的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">"button"</span>)</span><br><span class="line"></span><br><span class="line">[].forEach.call(buttons, <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem.innerText)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这段代码会报错，因为它被解释为这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">"button"</span>)[].forEach.call(buttons, <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem.innerText)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>“[“, “(“, “+”, “-“, “&#x2F;“ 这些符号也有同样的问题。所以，不加分号的风格，要避免这些情况。于是，可以这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">"button"</span>)</span><br><span class="line"></span><br><span class="line">;[].forEach.call(buttons, <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem.innerText)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也就是在 “[“, “(“, “+”, “-“, “&#x2F;“ 这些前面加分号，如果感觉分号不好看，还可以这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">"button"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> [].forEach.call(buttons, <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem.innerText)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最好的方式也许是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">"button"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(buttons, <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem.innerText)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然而，还没有结束，<code>Zepto, Sea.js, Vue.js </code> 都是不加分号阵营，观察它们的源代码，你会发现一个问题。这些代码中极少用 var 定义函数。这是因为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>].reduce(add)</span><br></pre></td></tr></table></figure><p>会被解释为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>].reduce(add)</span><br></pre></td></tr></table></figure><p>如果代码是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mark = [[], [], [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, cur</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pre + cur</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还会不报错，对排错很不友好。</p><h2 id="加分号"><a href="#加分号" class="headerlink" title="加分号"></a>加分号</h2><p>以加分号的方式写代码，不需要特别的规则，只需要熟练掌握 JavaScript 语法。加分号的风格，只有在<strong>漏加分号</strong>的情况下才会出问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>].reduce(add)</span><br></pre></td></tr></table></figure><p>这是前面用到过的例子，代码会解释为 }[] 的结构。加分号阵营有：jQuery, Underscore.js, Backbone.js…</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>我推荐的是加分号风格，因为加分号不需要多余的附加规则。当然，你也可以选择不加分号风格，只要你清楚由此带来的附加限制。</p><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p><a href="http://www.zhihu.com/people/he-shi-jun" target="_blank" rel="noopener">贺师俊</a>写过一篇<a href="http://hax.iteye.com/blog/1563585" target="_blank" rel="noopener">《JavaScript语句后应该加分号么？》</a>。他推荐不加分号的风格，文章中谈了团队习惯、编程语言的风格、代码构建等更深入的问题，但是他的每个推论我都无法赞同。</p><blockquote><p>行首加分号的规则比函数表达式后面加分号的规则其实要简单！</p></blockquote><p>这是他推荐不加分号风格的依据，可是这个结论太过武断。他的推理过程是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">  ...  </span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(...)</span><br></pre></td></tr></table></figure><blockquote><p>var a &#x3D; function () {} 后面要加分号，坑爹！</p></blockquote><p>var 声明的变量后面本来就要加分号，这里只不过是定义了一个 function 类型的变量而已，当然要加。</p><blockquote><p>function if for 结构的 {} 后面不加分号，var a &#x3D; function() {} 后面就要加分号，这样不一致。</p></blockquote><p>本来就是不同类型的语句，只要了解 JavaScript 语法，这不是什么问题。</p><blockquote><p>行首是否要加分号，我只要看本行的第一个字符就可以了……然而，你如果要判断“}”后面是否要加“;”，你得向上回溯，看清楚整段代码是一个结构呢？还是一个函数？如果是函数的话，是函数声明呢？还是函数表达式！许多时候，你可能向上翻几页还没找到对应的“{”！或者已经忘记了是几层缩进了！</p></blockquote><p>这是编写可维护代码的问题。首先，你不应该写超长的 function。其次，缩进很多也是要尽量避免的。如果你写了超长的函数或者超多的缩进，有没有分号都一样难以阅读。其实超长 function 只应该出现在封装模块的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 超长函数</span></span><br><span class="line"></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>这种超长函数不会带来困扰：</p><ol><li>这种情况下超长函数不会有那么多缩进。</li><li>包装的头尾可以通过构建工具来加。</li><li>IDE 可以展开&#x2F;收缩大括号。</li></ol><blockquote><p>漏加分号时 jslint 提示不智能。</p></blockquote><p>这虽然会带来一定困扰，但是实际操作中几乎不会带来问题，jslint 报错时我们首先检查是不是漏了分号就可以了。他的文章还列举了一些奇葩换行导致的问题，但那同样是代码可维护性差的问题，不是加不加分号的问题。那种奇葩代码，不加分号一样难读。</p><blockquote><p>编译器（代码分析器）完全可以知道哪里应该有EOS (End of Statement)。既然所有的分号其实可以由机器自行加上（无论是加在行首还是行尾），那么我们自己还要手写所有分号的意义到底在哪里？</p></blockquote><p>这是他的文章最后写到的，也很奇葩。要不要加分号之所以有争议，就是因为 JavaScript 的自动插入分号机制并不健全。如果要依赖这个机制，就像前面说的，要加入额外的限定规则。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>如果涉及到改框架、造轮子等事情，需要同时了解<strong>加分号风格</strong>与<strong>不加分号风格</strong>。</li><li>我们总要有个选择，我推荐<strong>加分号风格</strong>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h2&gt;&lt;p&gt;JavaScript 分号之争由来已久，目前最被认可的结论是：&lt;strong&gt;JavaScript 语句末尾是否加分号是一个编程风格问题，可以加，也可以不加。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;选择&quot;&gt;&lt;a href=&quot;#选择&quot; class=&quot;headerlink&quot; title=&quot;选择&quot;&gt;&lt;/a&gt;选择&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;事情总要有个决定的！&lt;br&gt;——卫斯理《只限老友》（卫斯理系列最后一句话）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么，到底加不加分号呢？&lt;/p&gt;
&lt;p&gt;既然是一个风格问题，我们要明白的是如何选择。选择之前，我们来看看做出选择的前提是什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;加分号&lt;/code&gt;：前提是你了解如何以加分号的方式写 JavaScript。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;不加分号&lt;/code&gt;：前提是你了解如何以不加分号的方式写 JavaScript。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>木心《文学回忆录·先秦诸子·老子》阅读笔记</title>
    <link href="http://alphabao.github.io/2015/03/07/the-memoir-of-literature-laozi-note/"/>
    <id>http://alphabao.github.io/2015/03/07/the-memoir-of-literature-laozi-note/</id>
    <published>2015-03-07T10:09:56.000Z</published>
    <updated>2022-03-19T13:00:34.900Z</updated>
    
    <content type="html"><![CDATA[<p>　　写这篇笔记，当然是因为喜欢这本书的文字，但书中很多观点我都不赞同，尤其关于老子的。本文中我对《老子》的认识很多来自李航的<a href="http://yuedu.baidu.com/ebook/a97ae58576a20029bc642d56" target="_blank" rel="noopener">《道纪》</a>一书。</p><h3 id="穷·白·空"><a href="#穷·白·空" class="headerlink" title="穷·白·空"></a>穷·白·空</h3><blockquote><p>一穷，穷在经济上；二白，白在文化上；三空，空在思想上。</p></blockquote><p>　　现在经济腾飞了，但是雾霾来了，两难。文化和思想，能说的太多，不说了。文中这句话是在说哪个年代？应该看它的下一句：</p><blockquote><p>所以，唯物论之类进来，没有抵挡。</p></blockquote><p>　　现在为何没人讨论唯物唯心了？因为现代物理学已经把宇宙模型研究的比较完整，整个宇宙的生死都快要研究清楚了，只是大爆炸那个奇点和爆炸后一秒钟这两个状态的物理规律还没弄清。哲学思想早已跟不上物理学的进展，这就是霍金在《大设计》中所讲的“哲学死了”。唯物、唯心都是静态、割裂的看待问题，正确的方式应该是彼得·圣吉在《第五项修炼》中所说的“系统思考”。<a id="more"></a></p><h3 id="天·人"><a href="#天·人" class="headerlink" title="天·人"></a>天·人</h3><blockquote><p>他看破两大神秘：一是天，就是宇宙；二是人，就是生命。天，宇宙，是不仁。人，生命，是刍狗。</p></blockquote><p>　　这里的“他”是指老子，作者说老子看破了天和人，这个赞同。</p><p>　　天，宇宙，不仁；这个也赞同，宇宙遵循一组物理规律，没有仁不仁的问题。</p><p>　　人，生命，是刍狗；这个有问题。刍狗就是稻草狗，就是不重要的东西。如果老子认为人是刍狗，为什么要说“故道大、天大、地大、人亦大。域中有四大，而人居其一焉。（《老子·第二十五章》）”？</p><h3 id="宇宙观"><a href="#宇宙观" class="headerlink" title="宇宙观"></a>宇宙观</h3><blockquote><p>但我问，你周围，你过去的朋友，几个人具备人生观？</p></blockquote><p>　　你以为你有人生观？会不会太天真了？看下文分解：</p><blockquote><p>不从宇宙观而来的世界观，你的世界在哪里？不从世界观而来的人生观，你不活在世界上吗？所以，你认为你有人生观，没有、也不需要世界观，更没有、也更不需要宇宙观——你就什么也没有。</p></blockquote><p>　　人生观、世界观、宇宙观为什么有关系而且很重要，这是最精简的答案了。其实每个人都有这三观，只是你未必想过人生观归根结底是宇宙观，什么也不想，就人云亦云，这样没什么思想的人，确实可以说“你就什么也没有”。</p><h3 id="悲观"><a href="#悲观" class="headerlink" title="悲观"></a>悲观</h3><p>　　接下来的文章还有很长，是作者对《老子》中内容的解读，比如“无为，有为”。作者相信老子对天和人都看得很透，相信老子有自己的宇宙观，应该说作者的直觉很准。但由于作者认为老子是“悲观、绝望”的，所以后文的内容也是根据这两点展开，这自然南辕北辙。</p><p>　　为什么说南辕北辙？如果老子是悲观消极的，为什么要说“上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。（《老子·第四十一章》）”？这里明确说上士勤而行之，完全不悲观不消极。倒是下士耐人寻味，为什么大笑之？为什么“不笑不足以为道”？一个自成逻辑，思想完全无法进步的人，他的认知必有许多错误，当他听闻正确的东西，他会感觉荒谬、可笑。如果你看了本文之后感觉荒谬、可笑，是不是明白原因了？ ┑(￣。￣)┍</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　写这篇笔记，当然是因为喜欢这本书的文字，但书中很多观点我都不赞同，尤其关于老子的。本文中我对《老子》的认识很多来自李航的&lt;a href=&quot;http://yuedu.baidu.com/ebook/a97ae58576a20029bc642d56&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《道纪》&lt;/a&gt;一书。&lt;/p&gt;
&lt;h3 id=&quot;穷·白·空&quot;&gt;&lt;a href=&quot;#穷·白·空&quot; class=&quot;headerlink&quot; title=&quot;穷·白·空&quot;&gt;&lt;/a&gt;穷·白·空&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一穷，穷在经济上；二白，白在文化上；三空，空在思想上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　现在经济腾飞了，但是雾霾来了，两难。文化和思想，能说的太多，不说了。文中这句话是在说哪个年代？应该看它的下一句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，唯物论之类进来，没有抵挡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　现在为何没人讨论唯物唯心了？因为现代物理学已经把宇宙模型研究的比较完整，整个宇宙的生死都快要研究清楚了，只是大爆炸那个奇点和爆炸后一秒钟这两个状态的物理规律还没弄清。哲学思想早已跟不上物理学的进展，这就是霍金在《大设计》中所讲的“哲学死了”。唯物、唯心都是静态、割裂的看待问题，正确的方式应该是彼得·圣吉在《第五项修炼》中所说的“系统思考”。
    
    </summary>
    
    
      <category term="杂文" scheme="http://alphabao.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="木心" scheme="http://alphabao.github.io/tags/%E6%9C%A8%E5%BF%83/"/>
    
      <category term="老子" scheme="http://alphabao.github.io/tags/%E8%80%81%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>思考2014</title>
    <link href="http://alphabao.github.io/2015/01/01/think-about-the-2014/"/>
    <id>http://alphabao.github.io/2015/01/01/think-about-the-2014/</id>
    <published>2015-01-01T15:13:35.000Z</published>
    <updated>2022-03-19T13:00:34.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文学"><a href="#文学" class="headerlink" title="文学"></a>文学</h2><p>　　前两年开始，感觉到纯文学能给人通俗文学无法替代的东西，应该是或多或少体会到了一些纯文学之美。</p><p>　　有所突破是从《白象似的群山》开始，人物的对话不断给真正的情节增加可能性，这个小说的悬念与阅读进度不是简单的正相关。只有简单的对话，感觉是个很简单的故事，但令人琢磨不透。我相信每个人都是独立的，没有人可以完全理解另一个人的想法，《白象似的群山》正是写出了这种感觉。我们看别人的事情，永远只是套用自己理解的生活。</p><a id="more"></a><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>　　曹操说自己当初不过是想讨贼立功，当个征西将军，志向不过如此；后来侥幸战胜袁绍，位极人臣，已经超过原来的设想。</p><p>　　最初读到《让县自明本志令》，认为曹操这些话虚伪。汉末天下大乱，群雄并起，曹操获得的胜利果实最大，几乎代汉自立，怎么会“此其本志有限也”？后又多读了几本三国的书，人生体验也在增加，就开始感觉到《让县自明本志令》不全是实话，但这一部分应该是实话。因为夺天下实在不是能够刻意为之的事情，只能靠时势造英雄，正所谓“将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之”。</p><p>　　曹操绝非从一开始就设计好了称王称霸甚至篡汉之路，而是时局所推。所以曹操志得意满时候的诗，也是感慨：“譬如朝露，去日苦多”。</p><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>　　对于健康，好习惯不能抵消坏习惯。</p><p>　　习惯的三要素：暗示信号；惯例行为；奖赏。</p><p>　　改变坏习惯不能完全靠意志力，任何人的意志力都是有限的，每天有一定的配额，强行靠意志力改变习惯是在“自我耗竭”，难以持续。改变坏习惯需要好方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文学&quot;&gt;&lt;a href=&quot;#文学&quot; class=&quot;headerlink&quot; title=&quot;文学&quot;&gt;&lt;/a&gt;文学&lt;/h2&gt;&lt;p&gt;　　前两年开始，感觉到纯文学能给人通俗文学无法替代的东西，应该是或多或少体会到了一些纯文学之美。&lt;/p&gt;
&lt;p&gt;　　有所突破是从《白象似的群山》开始，人物的对话不断给真正的情节增加可能性，这个小说的悬念与阅读进度不是简单的正相关。只有简单的对话，感觉是个很简单的故事，但令人琢磨不透。我相信每个人都是独立的，没有人可以完全理解另一个人的想法，《白象似的群山》正是写出了这种感觉。我们看别人的事情，永远只是套用自己理解的生活。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂文" scheme="http://alphabao.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://alphabao.github.io/tags/%E6%9D%82%E6%96%87/"/>
    
      <category term="文学" scheme="http://alphabao.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
      <category term="曹操" scheme="http://alphabao.github.io/tags/%E6%9B%B9%E6%93%8D/"/>
    
      <category term="健康" scheme="http://alphabao.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用 localStorage</title>
    <link href="http://alphabao.github.io/2014/10/18/using-local-storage/"/>
    <id>http://alphabao.github.io/2014/10/18/using-local-storage/</id>
    <published>2014-10-18T07:59:54.000Z</published>
    <updated>2022-03-19T13:00:34.902Z</updated>
    
    <content type="html"><![CDATA[<p>localStorage 属于 Web 存储的一个 API（另一个是 sessionStorage），以 Key-Value 的形式保存数据，key 和 value 都是字符串。</p><h3 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h3><p>每个浏览器的容量限制不同，现代浏览器一般是 5M。检测容量：<a href="http://dev-test.nemikor.com/web-storage/support-test/" target="_blank" rel="noopener">Web Storage Support Test</a></p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>以未加密的形式保存在用户的计算机上。</p><a id="more"></a><h3 id="有效期"><a href="#有效期" class="headerlink" title="有效期"></a>有效期</h3><p>永不过期。可以在程序中删除，也可以在浏览器配置项中删除。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>同源的文档间共享同样的 localStorage 数据（使用同一个浏览器的情况下）。</p><h3 id="枚举所有数据"><a href="#枚举所有数据" class="headerlink" title="枚举所有数据"></a>枚举所有数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; localStorage.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> key = localStorage.key(i);</span><br><span class="line">  <span class="keyword">var</span> value = localStorage.getItem(key);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">': '</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存储事件（storage）"><a href="#存储事件（storage）" class="headerlink" title="存储事件（storage）"></a>存储事件（storage）</h3><p>打开两个标签页，其中一个页面上 localStorage 中的数据发生改变，同源的另一个标签页接收一个存储事件。</p><p>*在 Chrome 37 上试验无效，也许是我打开的方式不对。</p><h3 id="数据的实时性问题"><a href="#数据的实时性问题" class="headerlink" title="数据的实时性问题"></a>数据的实时性问题</h3><p>在 iOS 7 上，两个 WebView 间传数据：第一次 A 页面 set ，然后马上跳到 B 页面 get —— 正常；之后 A 页面再 set 新的值，B 页面 get 返回的却是上一次的值（旧的值）。</p><p>在 Stack Overflow 上看到 IE9 出现的这种问题是用 setTimeout 解决的。但在 iOS 7 的 WebView 中，这种方法并不可靠。</p><p>尝试：<br>A 页面 set，B 页面 setTimeout(…, 300)，有时候正确。值得注意的是 setTimeout(…, 0) 总是返回旧的值。更诡异的地方是，A 页面 set，然后 A 页面 get 总是返回新的值（正确的值），但到 B 页面 get 就返回旧的值。</p><p>以上都是 iOS 7 的 WebView 中遇到的问题，Android 4.4 的 WebView 并没有这种问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;localStorage 属于 Web 存储的一个 API（另一个是 sessionStorage），以 Key-Value 的形式保存数据，key 和 value 都是字符串。&lt;/p&gt;
&lt;h3 id=&quot;容量&quot;&gt;&lt;a href=&quot;#容量&quot; class=&quot;headerlink&quot; title=&quot;容量&quot;&gt;&lt;/a&gt;容量&lt;/h3&gt;&lt;p&gt;每个浏览器的容量限制不同，现代浏览器一般是 5M。检测容量：&lt;a href=&quot;http://dev-test.nemikor.com/web-storage/support-test/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Web Storage Support Test&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安全性&quot;&gt;&lt;a href=&quot;#安全性&quot; class=&quot;headerlink&quot; title=&quot;安全性&quot;&gt;&lt;/a&gt;安全性&lt;/h3&gt;&lt;p&gt;以未加密的形式保存在用户的计算机上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://alphabao.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="http://alphabao.github.io/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="http://alphabao.github.io/tags/HTML5/"/>
    
      <category term="localStorage" scheme="http://alphabao.github.io/tags/localStorage/"/>
    
  </entry>
  
</feed>
